// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var serverTimeData = ServerTimeData.FromJson(jsonString);

namespace QuickType.ServerTime
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ServerTimeData
    {
        [JsonProperty("abbreviation", Required = Required.Always)]
        public string Abbreviation { get; set; }

        [JsonProperty("client_ip", Required = Required.Always)]
        public string ClientIp { get; set; }

        [JsonProperty("datetime", Required = Required.Always)]
        public DateTimeOffset Datetime { get; set; }

        [JsonProperty("day_of_week", Required = Required.Always)]
        public long DayOfWeek { get; set; }

        [JsonProperty("day_of_year", Required = Required.Always)]
        public long DayOfYear { get; set; }

        [JsonProperty("dst", Required = Required.Always)]
        public bool Dst { get; set; }

        [JsonProperty("dst_from", Required = Required.AllowNull)]
        public object DstFrom { get; set; }

        [JsonProperty("dst_offset", Required = Required.Always)]
        public long DstOffset { get; set; }

        [JsonProperty("dst_until", Required = Required.AllowNull)]
        public object DstUntil { get; set; }

        [JsonProperty("raw_offset", Required = Required.Always)]
        public long RawOffset { get; set; }

        [JsonProperty("timezone", Required = Required.Always)]
        public string Timezone { get; set; }

        [JsonProperty("unixtime", Required = Required.Always)]
        public long Unixtime { get; set; }

        [JsonProperty("utc_datetime", Required = Required.Always)]
        public DateTimeOffset UtcDatetime { get; set; }

        [JsonProperty("utc_offset", Required = Required.Always)]
        public string UtcOffset { get; set; }

        [JsonProperty("week_number", Required = Required.Always)]
        public long WeekNumber { get; set; }
    }

    public partial class ServerTimeData
    {
        public static ServerTimeData FromJson(string json) => JsonConvert.DeserializeObject<ServerTimeData>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ServerTimeData self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
