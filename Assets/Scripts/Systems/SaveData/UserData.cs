// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: userData.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace com.datld.data {

  /// <summary>Holder for reflection information generated from userData.proto</summary>
  public static partial class UserDataReflection {

    #region Descriptor
    /// <summary>File descriptor for userData.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UserDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg51c2VyRGF0YS5wcm90byKSBAoIVXNlckRhdGESGwoIbWV0YURhdGEYASAB",
            "KAsyCS5NZXRhRGF0YRIhCglpbnZlbnRvcnkYAiABKAsyDi5Vc2VySW52ZW50",
            "b3J5EhsKCGdhbWVEYXRhGAMgASgLMgkuR2FtZURhdGESGwoIc2hvcERhdGEY",
            "BCABKAsyCS5TaG9wRGF0YRIqCg9kYXlUcmFja2luZ0RhdGEYBSABKAsyES5E",
            "YXlUcmFja2luZ1ZhbHVlEisKEGxvY2F0aW9uUGFja1NhdmUYBiABKAsyES5M",
            "b2NhdGlvblBhY2tTYXZlEiEKC3NldHRpbmdEYXRhGAcgASgLMgwuU2V0dGlu",
            "Z0RhdGESGwoIc3RhckRhdGEYCCABKAsyCS5TdGFyRGF0YRIbCghsYXN0RGF0",
            "YRgJIAEoCzIJLlVzZXJEYXRhEiMKDHR1dG9yaWFsRGF0YRgKIAEoCzINLlR1",
            "dG9yaWFsRGF0YRInCg5tYW51YWxIZXJvRGF0YRgLIAEoCzIPLk1hbnVhbEhl",
            "cm9EYXRhEiMKDHJlbWluZGVyRGF0YRgMIAEoCzINLlJlbWluZGVyRGF0YRIR",
            "CglSZW1vdmVBZHMYDSABKAgSLwoSbWlzc2lvbk1hbmFnZXJEYXRhGA4gASgL",
            "MhMuTWlzc2lvbk1hbmFnZXJEYXRhEh8KCmFkc1RyYWNrZXIYDyABKAsyCy5B",
            "ZHNUcmFja2VyIj4KDFR1dG9yaWFsRGF0YRIUCgxsYXN0VHV0b3JpYWwYASAB",
            "KAUSGAoQbGFzdFR1dG9yaWFsU3RlcBgCIAEoBSKzAgoITWV0YURhdGESDgoG",
            "VXNlcklEGAEgASgJEhAKCFVzZXJOYW1lGAIgASgJEhEKCVVzZXJMZXZlbBgD",
            "IAEoBRIQCghsYXN0U2F2ZRgEIAEoAxIWCg5MYXN0QmVnaW5EYXlUUxgFIAEo",
            "AxITCgtWZXJzaW9uRGF0YRgGIAEoBRISCgpGaXJlQmFzZUlEGAcgASgJEhIK",
            "Ck1hY0FkZHJlc3MYCCABKAkSEAoIUmV2aXNpb24YCSABKAMSGQoRZmlyc3RU",
            "aW1lSm9pbkdhbWUYCiABKAgSHgoWZmlyc3RUaW1lSm9pblRpbWVTdGFtcBgL",
            "IAEoAxIQCghkYXlMb2dpbhgMIAEoBRISCgpjb3VudExvZ2luGA0gASgFEhgK",
            "EElzVW5sb2NrSWRsZU1vZGUYDiABKAgipgUKDVVzZXJJbnZlbnRvcnkSEQoJ",
            "dG90YWxHb2xkGAEgASgDEhQKDHRvdGFsRGlhbW9uZBgCIAEoAxIRCgl0b3Rh",
            "bFBpbGwYAyABKAMSEgoKdG90YWxUb2tlbhgEIAEoAxIZChF0b3RhbFdlYXBv",
            "blNjcm9sbBgFIAEoAxIZChF0b3RhbEFybW91clNjcm9sbBgGIAEoAxIfCgxs",
            "aXN0SGVyb0RhdGEYByADKAsyCS5IZXJvRGF0YRIjCg5saXN0V2VhcG9uRGF0",
            "YRgIIAMoCzILLldlYXBvbkRhdGESIQoNbGlzdENoZXN0RGF0YRgJIAMoCzIK",
            "LkNoZXN0RGF0YRIjCg5saXN0VGFsZW50RGF0YRgKIAMoCzILLlRhbGVudERh",
            "dGESHQoKbWFudWFsSGVybxgLIAEoCzIJLkhlcm9EYXRhEjEKGWxpc3RDbGFp",
            "bWVkT25lVGltZVJld2FyZHMYDCADKAsyDi5SZXdhcmRUcmFja2VyEhQKDHRv",
            "dGFsUmFyZUtleRgNIAEoAxIZChF0b3RhbExlZ2VuZGFyeUtleRgOIAEoAxIZ",
            "ChF0b3RhbEFkc1JhcmVDaGVzdBgPIAEoAxIeChZ0b3RhbEFkc0xlZ2VuZGFy",
            "eUNoZXN0GBAgASgDEhkKEXRvdGFsSGVyb0NoZXN0S2V5GBYgASgDEiIKDmxp",
            "c3RBZGRPbkl0ZW1zGBEgAygLMgouQWRkT25JdGVtEhMKC3RhbGVudExldmVs",
            "GBIgASgFEh4KFmxhc3RDb2xsZWN0SWRsZUNoZXN0VFMYEyABKAMSMgoWbGlz",
            "dENsYWltZWRJZGxlUmV3YXJkcxgUIAMoCzISLklkbGVSZXdhcmRUcmFja2Vy",
            "EhsKE3RvdGFsUGlsbEZyb21Bc2NlbmQYFSABKAMijwEKCUFkZE9uSXRlbRIO",
            "CgZJdGVtSUQYASABKAkSEQoJSXRlbUNvdW50GAIgASgDEhwKBnN0YXR1cxgD",
            "IAEoDjIMLklURU1fU1RBVFVTEhcKD0V4cGlyZWREdXJhdGlvbhgEIAEoAxIX",
            "Cg9pc1VubGltaXRlZEl0ZW0YBSABKAgSDwoHcmVhZHlUUxgGIAEoAyJmCgpU",
            "YWxlbnREYXRhEhAKCFRhbGVudElEGAEgASgJEhMKC1RhbGVudExldmVsGAIg",
            "ASgFEhMKC1RhbGVudFZhbHVlGAMgASgCEhwKBnN0YXR1cxgEIAEoDjIMLklU",
            "RU1fU1RBVFVTIkgKDVJld2FyZFRyYWNrZXISEAoIcmV3YXJkSUQYASABKAkS",
            "EAoIZWFybmVkVFMYAiABKAMSEwoLY291bnRFYXJuZWQYAyABKAUiZQoRSWRs",
            "ZVJld2FyZFRyYWNrZXISEwoLbGV2ZWxSZXdhcmQYASABKAUSKAoQbGlzdEVh",
            "cm5lZFJld2FyZBgCIAMoCzIOLlJld2FyZFRyYWNrZXISEQoJc2Vhc29uTnVt",
            "GAMgASgFIrwBCglQb3dlckRhdGESEAoIZmlyZXJhdGUYASABKAISEgoKcGVy",
            "Y2VudERtZxgCIAEoAhIXCg9oZWFkc2hvdFBlcmNlbnQYAyABKAISEwoLY3Jp",
            "dFBlcmNlbnQYBCABKAISDQoFcmFuZ2UYBSABKAISCgoCaHAYBiABKAISDgoG",
            "YXJtb3VyGAcgASgCEgsKA2RtZxgIIAEoAhIjChtyZWR1Y2VTa2lsbENvdW50",
            "RG93blBlcmNlbnQYCSABKAIiuwQKCEhlcm9EYXRhEhAKCHVuaXF1ZUlEGAEg",
            "ASgJEiEKBHR5cGUYAiABKA4yEy5IZXJvRGF0YS5IRVJPX1RZUEUSDQoFbGV2",
            "ZWwYAyABKAUSDAoEcmFuaxgEIAEoBRIhCg1iYXNlSGVyb1Bvd2VyGAUgASgL",
            "MgouUG93ZXJEYXRhEhYKDmVxdWlwcGVkV2VhcG9uGAYgASgJEhYKDmVxdWlw",
            "cGVkQXJtb3VyGAcgASgJEiIKDmZpbmFsUG93ZXJEYXRhGAggASgLMgouUG93",
            "ZXJEYXRhEiAKCml0ZW1TdGF0dXMYCSABKA4yDC5JVEVNX1NUQVRVUxIkChBp",
            "ZGxlVXByYWRlZFBvd2VyGAogASgLMgouUG93ZXJEYXRhEhEKCWlkbGVMZXZl",
            "bBgLIAEoBRIQCghpZGxlUmFuaxgMIAEoBRIVCg1saXN0VWx0aW1hdGVzGA0g",
            "AygJEhgKEEluaXRQYXNzaXZlU2tpbGwYDiABKAkSLAoUbGlzdFdlYXBvbkF0",
            "dHJpYnV0ZXMYDyADKAsyDi5BdHRyaWJ1dGVEYXRhEiwKFGxpc3RBcm1vdXJB",
            "dHRyaWJ1dGVzGBAgAygLMg4uQXR0cmlidXRlRGF0YRISCgpjdXJyZW50RXhw",
            "GBEgASgDEhEKCXRhcmdldEV4cBgSIAEoAxIUCgxjdXJyZW50U2hhcmQYEyAB",
            "KAUiLwoJSEVST19UWVBFEgsKB0FTU0FVTFQQABIHCgNTUFkQARIMCghFTkdJ",
            "TkVFUhACIjwKDUF0dHJpYnV0ZURhdGESEwoLQXR0cmlidXRlSUQYASABKAkS",
            "FgoOQXR0cmlidXRlVmFsdWUYAiABKAIi9AEKCldlYXBvbkRhdGESEAoIdW5p",
            "cXVlSUQYASABKAkSEAoId2VhcG9uSUQYAiABKAkSDQoFbGV2ZWwYAyABKAUS",
            "DAoEcmFuaxgEIAEoBRIgCgxkZWZhdWx0UG93ZXIYBSABKAsyCi5Qb3dlckRh",
            "dGESIQoNdXBncmFkZWRQb3dlchgGIAEoCzIKLlBvd2VyRGF0YRIiCg5maW5h",
            "bFBvd2VyRGF0YRgHIAEoCzIKLlBvd2VyRGF0YRIgCgppdGVtU3RhdHVzGAgg",
            "ASgOMgwuSVRFTV9TVEFUVVMSGgoEdHlwZRgJIAEoDjIMLldFQVBPTl9UWVBF",
            "IlIKCUNoZXN0RGF0YRIQCgh1bmlxdWVJRBgBIAEoCRIRCgljaGVzdFR5cGUY",
            "AiABKAkSIAoKaXRlbVN0YXR1cxgDIAEoDjIMLklURU1fU1RBVFVTImsKCEdh",
            "bWVEYXRhEicKEGNhbXBhaWduUHJvZ3Jlc3MYASABKAsyDS5QbGF5UHJvZ3Jl",
            "c3MSIwoMaWRsZVByb2dyZXNzGAIgASgLMg0uUGxheVByb2dyZXNzEhEKCVRl",
            "YW1TbG90cxgDIAMoCSLRAQoMUGxheVByb2dyZXNzEhQKDGN1cnJlbnRMZXZl",
            "bBgBIAEoBRITCgtjdXJyZW50V2F2ZRgCIAEoBRIQCghtYXhMZXZlbBgDIAEo",
            "BRIUCgxsYXN0TG9nb3V0VFMYBCABKAMSFgoOY29sbGVjdGVkVmFsdWUYBSAB",
            "KAMSFwoPdG90YWxUaW1lUGxheWVkGAYgASgDEhMKC3Jlc2V0TW9kZVRTGAcg",
            "ASgDEhEKCXNlYXNvbk51bRgIIAEoBRIVCg1jb3VudFBsYXlHYW1lGAkgASgF",
            "IvMDCghTaG9wRGF0YRInCh9sYXN0UmVjZWl2ZUZyZWVBZHNSYXJlQ2hlc3RU",
            "aW1lGAEgASgDEiwKJGxhc3RSZWNlaXZlRnJlZUFkc0xlZ2VuZGFyeUNoZXN0",
            "VGltZRgCIAEoAxIhChlzdGFja0ZyZWVBZHNSYXJlQ2hlc3RUaW1lGAMgASgC",
            "EiYKHnN0YWNrRnJlZUFkc0xlZ2VuZGFyeUNoZXN0VGltZRgEIAEoAhIbChNz",
            "dGFja0NoZXN0RXF1aXBSYW5rGAUgAygFEh0KFWxhc3REYXlSZXNldEZyZWVT",
            "dHVmZhgGIAEoAxIdChVjdXJyZW50SW5kZXhGcmVlU3R1ZmYYByABKAMSFgoO",
            "aGFzUHVyY2hhc2VJQVAYCCABKAgSGwoTYm91Z2h0UHJvbW90aW9uUGFjaxgJ",
            "IAMoCRIVCg1oYXNCYXR0bGVQYXNzGAogASgIEhoKEmhhc1B1cmNoYXNlRGlh",
            "bW9uZBgLIAEoCBIiChpsYXN0QnV5RnJlZURpYW1vbmRQYWNrVGltZRgMIAEo",
            "AxIfChdsYXN0QnV5RnJlZUdvbGRQYWNrVGltZRgNIAEoAxIhChlsYXN0QnV5",
            "RnJlZVdQQ29pblBhY2tUaW1lGA4gASgDEhoKEmxhc3RGcmVlU3R1ZmZJdGVt",
            "cxgPIAMoCSLrAQoQRGF5VHJhY2tpbmdWYWx1ZRIWCg5Ub2RheVJldml2ZUFk",
            "cxgBIAEoBRIaChJUb2RheVJldml2ZURpYW1vbmQYAiABKAUSHQoVVG9kYXlF",
            "YXJuQWRkb25BaXJEcm9wGAMgASgFEiYKHlRvZGF5RG91YmxlQ29tcGxldGVM",
            "ZXZlbFJld2FyZBgEIAEoBRIpCiFJc1Bhc3NlZEZpcnN0VGltZVNob3dJbnRl",
            "cnN0aXRpYWwYBSABKAgSFAoMSXNEb25lUmF0aW5nGAYgASgIEhsKE0xhc3RD",
            "b3VudFNob3dSYXRpbmcYByABKAUiVAoQTG9jYXRpb25QYWNrU2F2ZRIRCgli",
            "b3VnaFBhY2sYASADKAkSFgoOc2hvd2VkTG9jYXRpb24YAiADKAkSFQoNbGFz",
            "dFNob3dMZXZlbBgDIAEoBSKvAQoLU2V0dGluZ0RhdGESDwoHaXNCZ21PbhgB",
            "IAEoCBIPCgdpc1NmeE9uGAIgASgIEhAKCGxhbmd1YWdlGAMgASgJEiEKGWlz",
            "UmFyZUNoZXN0Tm90aWZpY2F0aW9uT24YBCABKAgSJgoeaXNMZWdlbmRhcnlD",
            "aGVzdE5vdGlmaWNhdGlvbk9uGAUgASgIEiEKGWlzRnJlZVN0dWZmTm90aWZp",
            "Y2F0aW9uT24YBiABKAgiiAEKCFN0YXJEYXRhEhIKCmxldmVsU3RhcnMYASAD",
            "KAUSFgoOY2xhaW1lZERlZmF1bHQYAiADKAUSGQoRY2xhaW1lZEJhdHRsZVBh",
            "c3MYAyADKAUSFQoNbGFzdFRvdGFsU3RhchgEIAEoBRIeChZsYXN0VG90YWxT",
            "dGFySW5IVURIb21lGAUgASgFIhAKDk1hbnVhbEhlcm9EYXRhIlUKC01pc3Np",
            "b25EYXRhEgoKAmlkGAEgASgJEhMKC2N1cnJlbnRTdGVwGAIgASgFEhIKCmlz",
            "Q29tcGxldGUYAyABKAgSEQoJaXNDbGFpbWVkGAQgASgIIoUBChNNaXNzaW9u",
            "RHVyYXRpb25EYXRhEiIKDG1pc3Npb25EYXRhcxgBIAMoCzIMLk1pc3Npb25E",
            "YXRhEhAKCGR1cmF0aW9uGAIgASgFEhEKCXN0YXJ0RGF0ZRgDIAEoAxIRCglp",
            "c0NsYWltZWQYBCABKAgSEgoKaXNDb21wbGV0ZRgFIAEoCCJ+ChJNaXNzaW9u",
            "TWFuYWdlckRhdGESIwoFZGFpbHkYASABKAsyFC5NaXNzaW9uRHVyYXRpb25E",
            "YXRhEiQKBndlZWtseRgCIAEoCzIULk1pc3Npb25EdXJhdGlvbkRhdGESHQoV",
            "bGFzdENoZWNrTG9naW5NaXNzaW9uGAMgASgFIikKDFJlbWluZGVyRGF0YRIZ",
            "ChFuZXdIZXJvT25IdWRFcXVpcBgBIAMoCSIuCgpBZHNUcmFja2VyEiAKGGxh",
            "c3RUaW1lV2F0Y2hlZFJld2FyZEFkcxgBIAEoAypNCgtJVEVNX1NUQVRVUxII",
            "CgROT05FEAASCgoGTE9DS0VEEAESDQoJQVZBSUxBQkxFEAISDAoIQ0hPT1NJ",
            "TkcQAxILCgdESVNBQkxFEAQqYAoLV0VBUE9OX1RZUEUSDwoLTk9ORV9XRUFQ",
            "T04QABIKCgZQSVNUT0wQARIJCgVSSUZMRRACEgsKB0JBWk9PS0EQAxIPCgtN",
            "QUNISU5FX0dVThAEEgsKB1NIT1RHVU4QBUIRqgIOY29tLmRhdGxkLmRhdGFi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::com.datld.data.ITEM_STATUS), typeof(global::com.datld.data.WEAPON_TYPE), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.UserData), global::com.datld.data.UserData.Parser, new[]{ "MetaData", "Inventory", "GameData", "ShopData", "DayTrackingData", "LocationPackSave", "SettingData", "StarData", "LastData", "TutorialData", "ManualHeroData", "ReminderData", "RemoveAds", "MissionManagerData", "AdsTracker" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.TutorialData), global::com.datld.data.TutorialData.Parser, new[]{ "LastTutorial", "LastTutorialStep" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.MetaData), global::com.datld.data.MetaData.Parser, new[]{ "UserID", "UserName", "UserLevel", "LastSave", "LastBeginDayTS", "VersionData", "FireBaseID", "MacAddress", "Revision", "FirstTimeJoinGame", "FirstTimeJoinTimeStamp", "DayLogin", "CountLogin", "IsUnlockIdleMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.UserInventory), global::com.datld.data.UserInventory.Parser, new[]{ "TotalGold", "TotalDiamond", "TotalPill", "TotalToken", "TotalWeaponScroll", "TotalArmourScroll", "ListHeroData", "ListWeaponData", "ListChestData", "ListTalentData", "ManualHero", "ListClaimedOneTimeRewards", "TotalRareKey", "TotalLegendaryKey", "TotalAdsRareChest", "TotalAdsLegendaryChest", "TotalHeroChestKey", "ListAddOnItems", "TalentLevel", "LastCollectIdleChestTS", "ListClaimedIdleRewards", "TotalPillFromAscend" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.AddOnItem), global::com.datld.data.AddOnItem.Parser, new[]{ "ItemID", "ItemCount", "Status", "ExpiredDuration", "IsUnlimitedItem", "ReadyTS" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.TalentData), global::com.datld.data.TalentData.Parser, new[]{ "TalentID", "TalentLevel", "TalentValue", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.RewardTracker), global::com.datld.data.RewardTracker.Parser, new[]{ "RewardID", "EarnedTS", "CountEarned" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.IdleRewardTracker), global::com.datld.data.IdleRewardTracker.Parser, new[]{ "LevelReward", "ListEarnedReward", "SeasonNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.PowerData), global::com.datld.data.PowerData.Parser, new[]{ "Firerate", "PercentDmg", "HeadshotPercent", "CritPercent", "Range", "Hp", "Armour", "Dmg", "ReduceSkillCountDownPercent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.HeroData), global::com.datld.data.HeroData.Parser, new[]{ "UniqueID", "Type", "Level", "Rank", "BaseHeroPower", "EquippedWeapon", "EquippedArmour", "FinalPowerData", "ItemStatus", "IdleUpradedPower", "IdleLevel", "IdleRank", "ListUltimates", "InitPassiveSkill", "ListWeaponAttributes", "ListArmourAttributes", "CurrentExp", "TargetExp", "CurrentShard" }, null, new[]{ typeof(global::com.datld.data.HeroData.Types.HERO_TYPE) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.AttributeData), global::com.datld.data.AttributeData.Parser, new[]{ "AttributeID", "AttributeValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.WeaponData), global::com.datld.data.WeaponData.Parser, new[]{ "UniqueID", "WeaponID", "Level", "Rank", "DefaultPower", "UpgradedPower", "FinalPowerData", "ItemStatus", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.ChestData), global::com.datld.data.ChestData.Parser, new[]{ "UniqueID", "ChestType", "ItemStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.GameData), global::com.datld.data.GameData.Parser, new[]{ "CampaignProgress", "IdleProgress", "TeamSlots" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.PlayProgress), global::com.datld.data.PlayProgress.Parser, new[]{ "CurrentLevel", "CurrentWave", "MaxLevel", "LastLogoutTS", "CollectedValue", "TotalTimePlayed", "ResetModeTS", "SeasonNum", "CountPlayGame" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.ShopData), global::com.datld.data.ShopData.Parser, new[]{ "LastReceiveFreeAdsRareChestTime", "LastReceiveFreeAdsLegendaryChestTime", "StackFreeAdsRareChestTime", "StackFreeAdsLegendaryChestTime", "StackChestEquipRank", "LastDayResetFreeStuff", "CurrentIndexFreeStuff", "HasPurchaseIAP", "BoughtPromotionPack", "HasBattlePass", "HasPurchaseDiamond", "LastBuyFreeDiamondPackTime", "LastBuyFreeGoldPackTime", "LastBuyFreeWPCoinPackTime", "LastFreeStuffItems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.DayTrackingValue), global::com.datld.data.DayTrackingValue.Parser, new[]{ "TodayReviveAds", "TodayReviveDiamond", "TodayEarnAddonAirDrop", "TodayDoubleCompleteLevelReward", "IsPassedFirstTimeShowInterstitial", "IsDoneRating", "LastCountShowRating" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.LocationPackSave), global::com.datld.data.LocationPackSave.Parser, new[]{ "BoughPack", "ShowedLocation", "LastShowLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.SettingData), global::com.datld.data.SettingData.Parser, new[]{ "IsBgmOn", "IsSfxOn", "Language", "IsRareChestNotificationOn", "IsLegendaryChestNotificationOn", "IsFreeStuffNotificationOn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.StarData), global::com.datld.data.StarData.Parser, new[]{ "LevelStars", "ClaimedDefault", "ClaimedBattlePass", "LastTotalStar", "LastTotalStarInHUDHome" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.ManualHeroData), global::com.datld.data.ManualHeroData.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.MissionData), global::com.datld.data.MissionData.Parser, new[]{ "Id", "CurrentStep", "IsComplete", "IsClaimed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.MissionDurationData), global::com.datld.data.MissionDurationData.Parser, new[]{ "MissionDatas", "Duration", "StartDate", "IsClaimed", "IsComplete" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.MissionManagerData), global::com.datld.data.MissionManagerData.Parser, new[]{ "Daily", "Weekly", "LastCheckLoginMission" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.ReminderData), global::com.datld.data.ReminderData.Parser, new[]{ "NewHeroOnHudEquip" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::com.datld.data.AdsTracker), global::com.datld.data.AdsTracker.Parser, new[]{ "LastTimeWatchedRewardAds" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ITEM_STATUS {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("LOCKED")] Locked = 1,
    [pbr::OriginalName("AVAILABLE")] Available = 2,
    [pbr::OriginalName("CHOOSING")] Choosing = 3,
    [pbr::OriginalName("DISABLE")] Disable = 4,
  }

  public enum WEAPON_TYPE {
    [pbr::OriginalName("NONE_WEAPON")] NoneWeapon = 0,
    [pbr::OriginalName("PISTOL")] Pistol = 1,
    [pbr::OriginalName("RIFLE")] Rifle = 2,
    [pbr::OriginalName("BAZOOKA")] Bazooka = 3,
    [pbr::OriginalName("MACHINE_GUN")] MachineGun = 4,
    [pbr::OriginalName("SHOTGUN")] Shotgun = 5,
  }

  #endregion

  #region Messages
  public sealed partial class UserData : pb::IMessage<UserData> {
    private static readonly pb::MessageParser<UserData> _parser = new pb::MessageParser<UserData>(() => new UserData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserData(UserData other) : this() {
      metaData_ = other.metaData_ != null ? other.metaData_.Clone() : null;
      inventory_ = other.inventory_ != null ? other.inventory_.Clone() : null;
      gameData_ = other.gameData_ != null ? other.gameData_.Clone() : null;
      shopData_ = other.shopData_ != null ? other.shopData_.Clone() : null;
      dayTrackingData_ = other.dayTrackingData_ != null ? other.dayTrackingData_.Clone() : null;
      locationPackSave_ = other.locationPackSave_ != null ? other.locationPackSave_.Clone() : null;
      settingData_ = other.settingData_ != null ? other.settingData_.Clone() : null;
      starData_ = other.starData_ != null ? other.starData_.Clone() : null;
      lastData_ = other.lastData_ != null ? other.lastData_.Clone() : null;
      tutorialData_ = other.tutorialData_ != null ? other.tutorialData_.Clone() : null;
      manualHeroData_ = other.manualHeroData_ != null ? other.manualHeroData_.Clone() : null;
      reminderData_ = other.reminderData_ != null ? other.reminderData_.Clone() : null;
      removeAds_ = other.removeAds_;
      missionManagerData_ = other.missionManagerData_ != null ? other.missionManagerData_.Clone() : null;
      adsTracker_ = other.adsTracker_ != null ? other.adsTracker_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserData Clone() {
      return new UserData(this);
    }

    /// <summary>Field number for the "metaData" field.</summary>
    public const int MetaDataFieldNumber = 1;
    private global::com.datld.data.MetaData metaData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.MetaData MetaData {
      get { return metaData_; }
      set {
        metaData_ = value;
      }
    }

    /// <summary>Field number for the "inventory" field.</summary>
    public const int InventoryFieldNumber = 2;
    private global::com.datld.data.UserInventory inventory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.UserInventory Inventory {
      get { return inventory_; }
      set {
        inventory_ = value;
      }
    }

    /// <summary>Field number for the "gameData" field.</summary>
    public const int GameDataFieldNumber = 3;
    private global::com.datld.data.GameData gameData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.GameData GameData {
      get { return gameData_; }
      set {
        gameData_ = value;
      }
    }

    /// <summary>Field number for the "shopData" field.</summary>
    public const int ShopDataFieldNumber = 4;
    private global::com.datld.data.ShopData shopData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.ShopData ShopData {
      get { return shopData_; }
      set {
        shopData_ = value;
      }
    }

    /// <summary>Field number for the "dayTrackingData" field.</summary>
    public const int DayTrackingDataFieldNumber = 5;
    private global::com.datld.data.DayTrackingValue dayTrackingData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.DayTrackingValue DayTrackingData {
      get { return dayTrackingData_; }
      set {
        dayTrackingData_ = value;
      }
    }

    /// <summary>Field number for the "locationPackSave" field.</summary>
    public const int LocationPackSaveFieldNumber = 6;
    private global::com.datld.data.LocationPackSave locationPackSave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.LocationPackSave LocationPackSave {
      get { return locationPackSave_; }
      set {
        locationPackSave_ = value;
      }
    }

    /// <summary>Field number for the "settingData" field.</summary>
    public const int SettingDataFieldNumber = 7;
    private global::com.datld.data.SettingData settingData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.SettingData SettingData {
      get { return settingData_; }
      set {
        settingData_ = value;
      }
    }

    /// <summary>Field number for the "starData" field.</summary>
    public const int StarDataFieldNumber = 8;
    private global::com.datld.data.StarData starData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.StarData StarData {
      get { return starData_; }
      set {
        starData_ = value;
      }
    }

    /// <summary>Field number for the "lastData" field.</summary>
    public const int LastDataFieldNumber = 9;
    private global::com.datld.data.UserData lastData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.UserData LastData {
      get { return lastData_; }
      set {
        lastData_ = value;
      }
    }

    /// <summary>Field number for the "tutorialData" field.</summary>
    public const int TutorialDataFieldNumber = 10;
    private global::com.datld.data.TutorialData tutorialData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.TutorialData TutorialData {
      get { return tutorialData_; }
      set {
        tutorialData_ = value;
      }
    }

    /// <summary>Field number for the "manualHeroData" field.</summary>
    public const int ManualHeroDataFieldNumber = 11;
    private global::com.datld.data.ManualHeroData manualHeroData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.ManualHeroData ManualHeroData {
      get { return manualHeroData_; }
      set {
        manualHeroData_ = value;
      }
    }

    /// <summary>Field number for the "reminderData" field.</summary>
    public const int ReminderDataFieldNumber = 12;
    private global::com.datld.data.ReminderData reminderData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.ReminderData ReminderData {
      get { return reminderData_; }
      set {
        reminderData_ = value;
      }
    }

    /// <summary>Field number for the "RemoveAds" field.</summary>
    public const int RemoveAdsFieldNumber = 13;
    private bool removeAds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RemoveAds {
      get { return removeAds_; }
      set {
        removeAds_ = value;
      }
    }

    /// <summary>Field number for the "missionManagerData" field.</summary>
    public const int MissionManagerDataFieldNumber = 14;
    private global::com.datld.data.MissionManagerData missionManagerData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.MissionManagerData MissionManagerData {
      get { return missionManagerData_; }
      set {
        missionManagerData_ = value;
      }
    }

    /// <summary>Field number for the "adsTracker" field.</summary>
    public const int AdsTrackerFieldNumber = 15;
    private global::com.datld.data.AdsTracker adsTracker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.AdsTracker AdsTracker {
      get { return adsTracker_; }
      set {
        adsTracker_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MetaData, other.MetaData)) return false;
      if (!object.Equals(Inventory, other.Inventory)) return false;
      if (!object.Equals(GameData, other.GameData)) return false;
      if (!object.Equals(ShopData, other.ShopData)) return false;
      if (!object.Equals(DayTrackingData, other.DayTrackingData)) return false;
      if (!object.Equals(LocationPackSave, other.LocationPackSave)) return false;
      if (!object.Equals(SettingData, other.SettingData)) return false;
      if (!object.Equals(StarData, other.StarData)) return false;
      if (!object.Equals(LastData, other.LastData)) return false;
      if (!object.Equals(TutorialData, other.TutorialData)) return false;
      if (!object.Equals(ManualHeroData, other.ManualHeroData)) return false;
      if (!object.Equals(ReminderData, other.ReminderData)) return false;
      if (RemoveAds != other.RemoveAds) return false;
      if (!object.Equals(MissionManagerData, other.MissionManagerData)) return false;
      if (!object.Equals(AdsTracker, other.AdsTracker)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metaData_ != null) hash ^= MetaData.GetHashCode();
      if (inventory_ != null) hash ^= Inventory.GetHashCode();
      if (gameData_ != null) hash ^= GameData.GetHashCode();
      if (shopData_ != null) hash ^= ShopData.GetHashCode();
      if (dayTrackingData_ != null) hash ^= DayTrackingData.GetHashCode();
      if (locationPackSave_ != null) hash ^= LocationPackSave.GetHashCode();
      if (settingData_ != null) hash ^= SettingData.GetHashCode();
      if (starData_ != null) hash ^= StarData.GetHashCode();
      if (lastData_ != null) hash ^= LastData.GetHashCode();
      if (tutorialData_ != null) hash ^= TutorialData.GetHashCode();
      if (manualHeroData_ != null) hash ^= ManualHeroData.GetHashCode();
      if (reminderData_ != null) hash ^= ReminderData.GetHashCode();
      if (RemoveAds != false) hash ^= RemoveAds.GetHashCode();
      if (missionManagerData_ != null) hash ^= MissionManagerData.GetHashCode();
      if (adsTracker_ != null) hash ^= AdsTracker.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (metaData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MetaData);
      }
      if (inventory_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Inventory);
      }
      if (gameData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GameData);
      }
      if (shopData_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ShopData);
      }
      if (dayTrackingData_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DayTrackingData);
      }
      if (locationPackSave_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(LocationPackSave);
      }
      if (settingData_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(SettingData);
      }
      if (starData_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(StarData);
      }
      if (lastData_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(LastData);
      }
      if (tutorialData_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(TutorialData);
      }
      if (manualHeroData_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(ManualHeroData);
      }
      if (reminderData_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ReminderData);
      }
      if (RemoveAds != false) {
        output.WriteRawTag(104);
        output.WriteBool(RemoveAds);
      }
      if (missionManagerData_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(MissionManagerData);
      }
      if (adsTracker_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(AdsTracker);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metaData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MetaData);
      }
      if (inventory_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Inventory);
      }
      if (gameData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GameData);
      }
      if (shopData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShopData);
      }
      if (dayTrackingData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DayTrackingData);
      }
      if (locationPackSave_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocationPackSave);
      }
      if (settingData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SettingData);
      }
      if (starData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StarData);
      }
      if (lastData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastData);
      }
      if (tutorialData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TutorialData);
      }
      if (manualHeroData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ManualHeroData);
      }
      if (reminderData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReminderData);
      }
      if (RemoveAds != false) {
        size += 1 + 1;
      }
      if (missionManagerData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MissionManagerData);
      }
      if (adsTracker_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdsTracker);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserData other) {
      if (other == null) {
        return;
      }
      if (other.metaData_ != null) {
        if (metaData_ == null) {
          MetaData = new global::com.datld.data.MetaData();
        }
        MetaData.MergeFrom(other.MetaData);
      }
      if (other.inventory_ != null) {
        if (inventory_ == null) {
          Inventory = new global::com.datld.data.UserInventory();
        }
        Inventory.MergeFrom(other.Inventory);
      }
      if (other.gameData_ != null) {
        if (gameData_ == null) {
          GameData = new global::com.datld.data.GameData();
        }
        GameData.MergeFrom(other.GameData);
      }
      if (other.shopData_ != null) {
        if (shopData_ == null) {
          ShopData = new global::com.datld.data.ShopData();
        }
        ShopData.MergeFrom(other.ShopData);
      }
      if (other.dayTrackingData_ != null) {
        if (dayTrackingData_ == null) {
          DayTrackingData = new global::com.datld.data.DayTrackingValue();
        }
        DayTrackingData.MergeFrom(other.DayTrackingData);
      }
      if (other.locationPackSave_ != null) {
        if (locationPackSave_ == null) {
          LocationPackSave = new global::com.datld.data.LocationPackSave();
        }
        LocationPackSave.MergeFrom(other.LocationPackSave);
      }
      if (other.settingData_ != null) {
        if (settingData_ == null) {
          SettingData = new global::com.datld.data.SettingData();
        }
        SettingData.MergeFrom(other.SettingData);
      }
      if (other.starData_ != null) {
        if (starData_ == null) {
          StarData = new global::com.datld.data.StarData();
        }
        StarData.MergeFrom(other.StarData);
      }
      if (other.lastData_ != null) {
        if (lastData_ == null) {
          LastData = new global::com.datld.data.UserData();
        }
        LastData.MergeFrom(other.LastData);
      }
      if (other.tutorialData_ != null) {
        if (tutorialData_ == null) {
          TutorialData = new global::com.datld.data.TutorialData();
        }
        TutorialData.MergeFrom(other.TutorialData);
      }
      if (other.manualHeroData_ != null) {
        if (manualHeroData_ == null) {
          ManualHeroData = new global::com.datld.data.ManualHeroData();
        }
        ManualHeroData.MergeFrom(other.ManualHeroData);
      }
      if (other.reminderData_ != null) {
        if (reminderData_ == null) {
          ReminderData = new global::com.datld.data.ReminderData();
        }
        ReminderData.MergeFrom(other.ReminderData);
      }
      if (other.RemoveAds != false) {
        RemoveAds = other.RemoveAds;
      }
      if (other.missionManagerData_ != null) {
        if (missionManagerData_ == null) {
          MissionManagerData = new global::com.datld.data.MissionManagerData();
        }
        MissionManagerData.MergeFrom(other.MissionManagerData);
      }
      if (other.adsTracker_ != null) {
        if (adsTracker_ == null) {
          AdsTracker = new global::com.datld.data.AdsTracker();
        }
        AdsTracker.MergeFrom(other.AdsTracker);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metaData_ == null) {
              MetaData = new global::com.datld.data.MetaData();
            }
            input.ReadMessage(MetaData);
            break;
          }
          case 18: {
            if (inventory_ == null) {
              Inventory = new global::com.datld.data.UserInventory();
            }
            input.ReadMessage(Inventory);
            break;
          }
          case 26: {
            if (gameData_ == null) {
              GameData = new global::com.datld.data.GameData();
            }
            input.ReadMessage(GameData);
            break;
          }
          case 34: {
            if (shopData_ == null) {
              ShopData = new global::com.datld.data.ShopData();
            }
            input.ReadMessage(ShopData);
            break;
          }
          case 42: {
            if (dayTrackingData_ == null) {
              DayTrackingData = new global::com.datld.data.DayTrackingValue();
            }
            input.ReadMessage(DayTrackingData);
            break;
          }
          case 50: {
            if (locationPackSave_ == null) {
              LocationPackSave = new global::com.datld.data.LocationPackSave();
            }
            input.ReadMessage(LocationPackSave);
            break;
          }
          case 58: {
            if (settingData_ == null) {
              SettingData = new global::com.datld.data.SettingData();
            }
            input.ReadMessage(SettingData);
            break;
          }
          case 66: {
            if (starData_ == null) {
              StarData = new global::com.datld.data.StarData();
            }
            input.ReadMessage(StarData);
            break;
          }
          case 74: {
            if (lastData_ == null) {
              LastData = new global::com.datld.data.UserData();
            }
            input.ReadMessage(LastData);
            break;
          }
          case 82: {
            if (tutorialData_ == null) {
              TutorialData = new global::com.datld.data.TutorialData();
            }
            input.ReadMessage(TutorialData);
            break;
          }
          case 90: {
            if (manualHeroData_ == null) {
              ManualHeroData = new global::com.datld.data.ManualHeroData();
            }
            input.ReadMessage(ManualHeroData);
            break;
          }
          case 98: {
            if (reminderData_ == null) {
              ReminderData = new global::com.datld.data.ReminderData();
            }
            input.ReadMessage(ReminderData);
            break;
          }
          case 104: {
            RemoveAds = input.ReadBool();
            break;
          }
          case 114: {
            if (missionManagerData_ == null) {
              MissionManagerData = new global::com.datld.data.MissionManagerData();
            }
            input.ReadMessage(MissionManagerData);
            break;
          }
          case 122: {
            if (adsTracker_ == null) {
              AdsTracker = new global::com.datld.data.AdsTracker();
            }
            input.ReadMessage(AdsTracker);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TutorialData : pb::IMessage<TutorialData> {
    private static readonly pb::MessageParser<TutorialData> _parser = new pb::MessageParser<TutorialData>(() => new TutorialData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TutorialData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TutorialData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TutorialData(TutorialData other) : this() {
      lastTutorial_ = other.lastTutorial_;
      lastTutorialStep_ = other.lastTutorialStep_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TutorialData Clone() {
      return new TutorialData(this);
    }

    /// <summary>Field number for the "lastTutorial" field.</summary>
    public const int LastTutorialFieldNumber = 1;
    private int lastTutorial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastTutorial {
      get { return lastTutorial_; }
      set {
        lastTutorial_ = value;
      }
    }

    /// <summary>Field number for the "lastTutorialStep" field.</summary>
    public const int LastTutorialStepFieldNumber = 2;
    private int lastTutorialStep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastTutorialStep {
      get { return lastTutorialStep_; }
      set {
        lastTutorialStep_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TutorialData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TutorialData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastTutorial != other.LastTutorial) return false;
      if (LastTutorialStep != other.LastTutorialStep) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastTutorial != 0) hash ^= LastTutorial.GetHashCode();
      if (LastTutorialStep != 0) hash ^= LastTutorialStep.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastTutorial != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LastTutorial);
      }
      if (LastTutorialStep != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LastTutorialStep);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastTutorial != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTutorial);
      }
      if (LastTutorialStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTutorialStep);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TutorialData other) {
      if (other == null) {
        return;
      }
      if (other.LastTutorial != 0) {
        LastTutorial = other.LastTutorial;
      }
      if (other.LastTutorialStep != 0) {
        LastTutorialStep = other.LastTutorialStep;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LastTutorial = input.ReadInt32();
            break;
          }
          case 16: {
            LastTutorialStep = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MetaData : pb::IMessage<MetaData> {
    private static readonly pb::MessageParser<MetaData> _parser = new pb::MessageParser<MetaData>(() => new MetaData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MetaData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetaData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetaData(MetaData other) : this() {
      userID_ = other.userID_;
      userName_ = other.userName_;
      userLevel_ = other.userLevel_;
      lastSave_ = other.lastSave_;
      lastBeginDayTS_ = other.lastBeginDayTS_;
      versionData_ = other.versionData_;
      fireBaseID_ = other.fireBaseID_;
      macAddress_ = other.macAddress_;
      revision_ = other.revision_;
      firstTimeJoinGame_ = other.firstTimeJoinGame_;
      firstTimeJoinTimeStamp_ = other.firstTimeJoinTimeStamp_;
      dayLogin_ = other.dayLogin_;
      countLogin_ = other.countLogin_;
      isUnlockIdleMode_ = other.isUnlockIdleMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetaData Clone() {
      return new MetaData(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private string userID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserID {
      get { return userID_; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserLevel" field.</summary>
    public const int UserLevelFieldNumber = 3;
    private int userLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UserLevel {
      get { return userLevel_; }
      set {
        userLevel_ = value;
      }
    }

    /// <summary>Field number for the "lastSave" field.</summary>
    public const int LastSaveFieldNumber = 4;
    private long lastSave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastSave {
      get { return lastSave_; }
      set {
        lastSave_ = value;
      }
    }

    /// <summary>Field number for the "LastBeginDayTS" field.</summary>
    public const int LastBeginDayTSFieldNumber = 5;
    private long lastBeginDayTS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastBeginDayTS {
      get { return lastBeginDayTS_; }
      set {
        lastBeginDayTS_ = value;
      }
    }

    /// <summary>Field number for the "VersionData" field.</summary>
    public const int VersionDataFieldNumber = 6;
    private int versionData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VersionData {
      get { return versionData_; }
      set {
        versionData_ = value;
      }
    }

    /// <summary>Field number for the "FireBaseID" field.</summary>
    public const int FireBaseIDFieldNumber = 7;
    private string fireBaseID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FireBaseID {
      get { return fireBaseID_; }
      set {
        fireBaseID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "MacAddress" field.</summary>
    public const int MacAddressFieldNumber = 8;
    private string macAddress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MacAddress {
      get { return macAddress_; }
      set {
        macAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Revision" field.</summary>
    public const int RevisionFieldNumber = 9;
    private long revision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Revision {
      get { return revision_; }
      set {
        revision_ = value;
      }
    }

    /// <summary>Field number for the "firstTimeJoinGame" field.</summary>
    public const int FirstTimeJoinGameFieldNumber = 10;
    private bool firstTimeJoinGame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FirstTimeJoinGame {
      get { return firstTimeJoinGame_; }
      set {
        firstTimeJoinGame_ = value;
      }
    }

    /// <summary>Field number for the "firstTimeJoinTimeStamp" field.</summary>
    public const int FirstTimeJoinTimeStampFieldNumber = 11;
    private long firstTimeJoinTimeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FirstTimeJoinTimeStamp {
      get { return firstTimeJoinTimeStamp_; }
      set {
        firstTimeJoinTimeStamp_ = value;
      }
    }

    /// <summary>Field number for the "dayLogin" field.</summary>
    public const int DayLoginFieldNumber = 12;
    private int dayLogin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DayLogin {
      get { return dayLogin_; }
      set {
        dayLogin_ = value;
      }
    }

    /// <summary>Field number for the "countLogin" field.</summary>
    public const int CountLoginFieldNumber = 13;
    private int countLogin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CountLogin {
      get { return countLogin_; }
      set {
        countLogin_ = value;
      }
    }

    /// <summary>Field number for the "IsUnlockIdleMode" field.</summary>
    public const int IsUnlockIdleModeFieldNumber = 14;
    private bool isUnlockIdleMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUnlockIdleMode {
      get { return isUnlockIdleMode_; }
      set {
        isUnlockIdleMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MetaData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MetaData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (UserName != other.UserName) return false;
      if (UserLevel != other.UserLevel) return false;
      if (LastSave != other.LastSave) return false;
      if (LastBeginDayTS != other.LastBeginDayTS) return false;
      if (VersionData != other.VersionData) return false;
      if (FireBaseID != other.FireBaseID) return false;
      if (MacAddress != other.MacAddress) return false;
      if (Revision != other.Revision) return false;
      if (FirstTimeJoinGame != other.FirstTimeJoinGame) return false;
      if (FirstTimeJoinTimeStamp != other.FirstTimeJoinTimeStamp) return false;
      if (DayLogin != other.DayLogin) return false;
      if (CountLogin != other.CountLogin) return false;
      if (IsUnlockIdleMode != other.IsUnlockIdleMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID.Length != 0) hash ^= UserID.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (UserLevel != 0) hash ^= UserLevel.GetHashCode();
      if (LastSave != 0L) hash ^= LastSave.GetHashCode();
      if (LastBeginDayTS != 0L) hash ^= LastBeginDayTS.GetHashCode();
      if (VersionData != 0) hash ^= VersionData.GetHashCode();
      if (FireBaseID.Length != 0) hash ^= FireBaseID.GetHashCode();
      if (MacAddress.Length != 0) hash ^= MacAddress.GetHashCode();
      if (Revision != 0L) hash ^= Revision.GetHashCode();
      if (FirstTimeJoinGame != false) hash ^= FirstTimeJoinGame.GetHashCode();
      if (FirstTimeJoinTimeStamp != 0L) hash ^= FirstTimeJoinTimeStamp.GetHashCode();
      if (DayLogin != 0) hash ^= DayLogin.GetHashCode();
      if (CountLogin != 0) hash ^= CountLogin.GetHashCode();
      if (IsUnlockIdleMode != false) hash ^= IsUnlockIdleMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserID);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (UserLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(UserLevel);
      }
      if (LastSave != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(LastSave);
      }
      if (LastBeginDayTS != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LastBeginDayTS);
      }
      if (VersionData != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(VersionData);
      }
      if (FireBaseID.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(FireBaseID);
      }
      if (MacAddress.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(MacAddress);
      }
      if (Revision != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Revision);
      }
      if (FirstTimeJoinGame != false) {
        output.WriteRawTag(80);
        output.WriteBool(FirstTimeJoinGame);
      }
      if (FirstTimeJoinTimeStamp != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(FirstTimeJoinTimeStamp);
      }
      if (DayLogin != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(DayLogin);
      }
      if (CountLogin != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(CountLogin);
      }
      if (IsUnlockIdleMode != false) {
        output.WriteRawTag(112);
        output.WriteBool(IsUnlockIdleMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (UserLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserLevel);
      }
      if (LastSave != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastSave);
      }
      if (LastBeginDayTS != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastBeginDayTS);
      }
      if (VersionData != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VersionData);
      }
      if (FireBaseID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FireBaseID);
      }
      if (MacAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MacAddress);
      }
      if (Revision != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Revision);
      }
      if (FirstTimeJoinGame != false) {
        size += 1 + 1;
      }
      if (FirstTimeJoinTimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FirstTimeJoinTimeStamp);
      }
      if (DayLogin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DayLogin);
      }
      if (CountLogin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CountLogin);
      }
      if (IsUnlockIdleMode != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MetaData other) {
      if (other == null) {
        return;
      }
      if (other.UserID.Length != 0) {
        UserID = other.UserID;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.UserLevel != 0) {
        UserLevel = other.UserLevel;
      }
      if (other.LastSave != 0L) {
        LastSave = other.LastSave;
      }
      if (other.LastBeginDayTS != 0L) {
        LastBeginDayTS = other.LastBeginDayTS;
      }
      if (other.VersionData != 0) {
        VersionData = other.VersionData;
      }
      if (other.FireBaseID.Length != 0) {
        FireBaseID = other.FireBaseID;
      }
      if (other.MacAddress.Length != 0) {
        MacAddress = other.MacAddress;
      }
      if (other.Revision != 0L) {
        Revision = other.Revision;
      }
      if (other.FirstTimeJoinGame != false) {
        FirstTimeJoinGame = other.FirstTimeJoinGame;
      }
      if (other.FirstTimeJoinTimeStamp != 0L) {
        FirstTimeJoinTimeStamp = other.FirstTimeJoinTimeStamp;
      }
      if (other.DayLogin != 0) {
        DayLogin = other.DayLogin;
      }
      if (other.CountLogin != 0) {
        CountLogin = other.CountLogin;
      }
      if (other.IsUnlockIdleMode != false) {
        IsUnlockIdleMode = other.IsUnlockIdleMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserID = input.ReadString();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 24: {
            UserLevel = input.ReadInt32();
            break;
          }
          case 32: {
            LastSave = input.ReadInt64();
            break;
          }
          case 40: {
            LastBeginDayTS = input.ReadInt64();
            break;
          }
          case 48: {
            VersionData = input.ReadInt32();
            break;
          }
          case 58: {
            FireBaseID = input.ReadString();
            break;
          }
          case 66: {
            MacAddress = input.ReadString();
            break;
          }
          case 72: {
            Revision = input.ReadInt64();
            break;
          }
          case 80: {
            FirstTimeJoinGame = input.ReadBool();
            break;
          }
          case 88: {
            FirstTimeJoinTimeStamp = input.ReadInt64();
            break;
          }
          case 96: {
            DayLogin = input.ReadInt32();
            break;
          }
          case 104: {
            CountLogin = input.ReadInt32();
            break;
          }
          case 112: {
            IsUnlockIdleMode = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UserInventory : pb::IMessage<UserInventory> {
    private static readonly pb::MessageParser<UserInventory> _parser = new pb::MessageParser<UserInventory>(() => new UserInventory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserInventory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInventory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInventory(UserInventory other) : this() {
      totalGold_ = other.totalGold_;
      totalDiamond_ = other.totalDiamond_;
      totalPill_ = other.totalPill_;
      totalToken_ = other.totalToken_;
      totalWeaponScroll_ = other.totalWeaponScroll_;
      totalArmourScroll_ = other.totalArmourScroll_;
      listHeroData_ = other.listHeroData_.Clone();
      listWeaponData_ = other.listWeaponData_.Clone();
      listChestData_ = other.listChestData_.Clone();
      listTalentData_ = other.listTalentData_.Clone();
      manualHero_ = other.manualHero_ != null ? other.manualHero_.Clone() : null;
      listClaimedOneTimeRewards_ = other.listClaimedOneTimeRewards_.Clone();
      totalRareKey_ = other.totalRareKey_;
      totalLegendaryKey_ = other.totalLegendaryKey_;
      totalAdsRareChest_ = other.totalAdsRareChest_;
      totalAdsLegendaryChest_ = other.totalAdsLegendaryChest_;
      totalHeroChestKey_ = other.totalHeroChestKey_;
      listAddOnItems_ = other.listAddOnItems_.Clone();
      talentLevel_ = other.talentLevel_;
      lastCollectIdleChestTS_ = other.lastCollectIdleChestTS_;
      listClaimedIdleRewards_ = other.listClaimedIdleRewards_.Clone();
      totalPillFromAscend_ = other.totalPillFromAscend_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserInventory Clone() {
      return new UserInventory(this);
    }

    /// <summary>Field number for the "totalGold" field.</summary>
    public const int TotalGoldFieldNumber = 1;
    private long totalGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalGold {
      get { return totalGold_; }
      set {
        totalGold_ = value;
      }
    }

    /// <summary>Field number for the "totalDiamond" field.</summary>
    public const int TotalDiamondFieldNumber = 2;
    private long totalDiamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalDiamond {
      get { return totalDiamond_; }
      set {
        totalDiamond_ = value;
      }
    }

    /// <summary>Field number for the "totalPill" field.</summary>
    public const int TotalPillFieldNumber = 3;
    private long totalPill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalPill {
      get { return totalPill_; }
      set {
        totalPill_ = value;
      }
    }

    /// <summary>Field number for the "totalToken" field.</summary>
    public const int TotalTokenFieldNumber = 4;
    private long totalToken_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalToken {
      get { return totalToken_; }
      set {
        totalToken_ = value;
      }
    }

    /// <summary>Field number for the "totalWeaponScroll" field.</summary>
    public const int TotalWeaponScrollFieldNumber = 5;
    private long totalWeaponScroll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalWeaponScroll {
      get { return totalWeaponScroll_; }
      set {
        totalWeaponScroll_ = value;
      }
    }

    /// <summary>Field number for the "totalArmourScroll" field.</summary>
    public const int TotalArmourScrollFieldNumber = 6;
    private long totalArmourScroll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalArmourScroll {
      get { return totalArmourScroll_; }
      set {
        totalArmourScroll_ = value;
      }
    }

    /// <summary>Field number for the "listHeroData" field.</summary>
    public const int ListHeroDataFieldNumber = 7;
    private static readonly pb::FieldCodec<global::com.datld.data.HeroData> _repeated_listHeroData_codec
        = pb::FieldCodec.ForMessage(58, global::com.datld.data.HeroData.Parser);
    private readonly pbc::RepeatedField<global::com.datld.data.HeroData> listHeroData_ = new pbc::RepeatedField<global::com.datld.data.HeroData>();
    /// <summary>
    ///list items
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.datld.data.HeroData> ListHeroData {
      get { return listHeroData_; }
    }

    /// <summary>Field number for the "listWeaponData" field.</summary>
    public const int ListWeaponDataFieldNumber = 8;
    private static readonly pb::FieldCodec<global::com.datld.data.WeaponData> _repeated_listWeaponData_codec
        = pb::FieldCodec.ForMessage(66, global::com.datld.data.WeaponData.Parser);
    private readonly pbc::RepeatedField<global::com.datld.data.WeaponData> listWeaponData_ = new pbc::RepeatedField<global::com.datld.data.WeaponData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.datld.data.WeaponData> ListWeaponData {
      get { return listWeaponData_; }
    }

    /// <summary>Field number for the "listChestData" field.</summary>
    public const int ListChestDataFieldNumber = 9;
    private static readonly pb::FieldCodec<global::com.datld.data.ChestData> _repeated_listChestData_codec
        = pb::FieldCodec.ForMessage(74, global::com.datld.data.ChestData.Parser);
    private readonly pbc::RepeatedField<global::com.datld.data.ChestData> listChestData_ = new pbc::RepeatedField<global::com.datld.data.ChestData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.datld.data.ChestData> ListChestData {
      get { return listChestData_; }
    }

    /// <summary>Field number for the "listTalentData" field.</summary>
    public const int ListTalentDataFieldNumber = 10;
    private static readonly pb::FieldCodec<global::com.datld.data.TalentData> _repeated_listTalentData_codec
        = pb::FieldCodec.ForMessage(82, global::com.datld.data.TalentData.Parser);
    private readonly pbc::RepeatedField<global::com.datld.data.TalentData> listTalentData_ = new pbc::RepeatedField<global::com.datld.data.TalentData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.datld.data.TalentData> ListTalentData {
      get { return listTalentData_; }
    }

    /// <summary>Field number for the "manualHero" field.</summary>
    public const int ManualHeroFieldNumber = 11;
    private global::com.datld.data.HeroData manualHero_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.HeroData ManualHero {
      get { return manualHero_; }
      set {
        manualHero_ = value;
      }
    }

    /// <summary>Field number for the "listClaimedOneTimeRewards" field.</summary>
    public const int ListClaimedOneTimeRewardsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::com.datld.data.RewardTracker> _repeated_listClaimedOneTimeRewards_codec
        = pb::FieldCodec.ForMessage(98, global::com.datld.data.RewardTracker.Parser);
    private readonly pbc::RepeatedField<global::com.datld.data.RewardTracker> listClaimedOneTimeRewards_ = new pbc::RepeatedField<global::com.datld.data.RewardTracker>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.datld.data.RewardTracker> ListClaimedOneTimeRewards {
      get { return listClaimedOneTimeRewards_; }
    }

    /// <summary>Field number for the "totalRareKey" field.</summary>
    public const int TotalRareKeyFieldNumber = 13;
    private long totalRareKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalRareKey {
      get { return totalRareKey_; }
      set {
        totalRareKey_ = value;
      }
    }

    /// <summary>Field number for the "totalLegendaryKey" field.</summary>
    public const int TotalLegendaryKeyFieldNumber = 14;
    private long totalLegendaryKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalLegendaryKey {
      get { return totalLegendaryKey_; }
      set {
        totalLegendaryKey_ = value;
      }
    }

    /// <summary>Field number for the "totalAdsRareChest" field.</summary>
    public const int TotalAdsRareChestFieldNumber = 15;
    private long totalAdsRareChest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalAdsRareChest {
      get { return totalAdsRareChest_; }
      set {
        totalAdsRareChest_ = value;
      }
    }

    /// <summary>Field number for the "totalAdsLegendaryChest" field.</summary>
    public const int TotalAdsLegendaryChestFieldNumber = 16;
    private long totalAdsLegendaryChest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalAdsLegendaryChest {
      get { return totalAdsLegendaryChest_; }
      set {
        totalAdsLegendaryChest_ = value;
      }
    }

    /// <summary>Field number for the "totalHeroChestKey" field.</summary>
    public const int TotalHeroChestKeyFieldNumber = 22;
    private long totalHeroChestKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalHeroChestKey {
      get { return totalHeroChestKey_; }
      set {
        totalHeroChestKey_ = value;
      }
    }

    /// <summary>Field number for the "listAddOnItems" field.</summary>
    public const int ListAddOnItemsFieldNumber = 17;
    private static readonly pb::FieldCodec<global::com.datld.data.AddOnItem> _repeated_listAddOnItems_codec
        = pb::FieldCodec.ForMessage(138, global::com.datld.data.AddOnItem.Parser);
    private readonly pbc::RepeatedField<global::com.datld.data.AddOnItem> listAddOnItems_ = new pbc::RepeatedField<global::com.datld.data.AddOnItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.datld.data.AddOnItem> ListAddOnItems {
      get { return listAddOnItems_; }
    }

    /// <summary>Field number for the "talentLevel" field.</summary>
    public const int TalentLevelFieldNumber = 18;
    private int talentLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TalentLevel {
      get { return talentLevel_; }
      set {
        talentLevel_ = value;
      }
    }

    /// <summary>Field number for the "lastCollectIdleChestTS" field.</summary>
    public const int LastCollectIdleChestTSFieldNumber = 19;
    private long lastCollectIdleChestTS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastCollectIdleChestTS {
      get { return lastCollectIdleChestTS_; }
      set {
        lastCollectIdleChestTS_ = value;
      }
    }

    /// <summary>Field number for the "listClaimedIdleRewards" field.</summary>
    public const int ListClaimedIdleRewardsFieldNumber = 20;
    private static readonly pb::FieldCodec<global::com.datld.data.IdleRewardTracker> _repeated_listClaimedIdleRewards_codec
        = pb::FieldCodec.ForMessage(162, global::com.datld.data.IdleRewardTracker.Parser);
    private readonly pbc::RepeatedField<global::com.datld.data.IdleRewardTracker> listClaimedIdleRewards_ = new pbc::RepeatedField<global::com.datld.data.IdleRewardTracker>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.datld.data.IdleRewardTracker> ListClaimedIdleRewards {
      get { return listClaimedIdleRewards_; }
    }

    /// <summary>Field number for the "totalPillFromAscend" field.</summary>
    public const int TotalPillFromAscendFieldNumber = 21;
    private long totalPillFromAscend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalPillFromAscend {
      get { return totalPillFromAscend_; }
      set {
        totalPillFromAscend_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserInventory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserInventory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalGold != other.TotalGold) return false;
      if (TotalDiamond != other.TotalDiamond) return false;
      if (TotalPill != other.TotalPill) return false;
      if (TotalToken != other.TotalToken) return false;
      if (TotalWeaponScroll != other.TotalWeaponScroll) return false;
      if (TotalArmourScroll != other.TotalArmourScroll) return false;
      if(!listHeroData_.Equals(other.listHeroData_)) return false;
      if(!listWeaponData_.Equals(other.listWeaponData_)) return false;
      if(!listChestData_.Equals(other.listChestData_)) return false;
      if(!listTalentData_.Equals(other.listTalentData_)) return false;
      if (!object.Equals(ManualHero, other.ManualHero)) return false;
      if(!listClaimedOneTimeRewards_.Equals(other.listClaimedOneTimeRewards_)) return false;
      if (TotalRareKey != other.TotalRareKey) return false;
      if (TotalLegendaryKey != other.TotalLegendaryKey) return false;
      if (TotalAdsRareChest != other.TotalAdsRareChest) return false;
      if (TotalAdsLegendaryChest != other.TotalAdsLegendaryChest) return false;
      if (TotalHeroChestKey != other.TotalHeroChestKey) return false;
      if(!listAddOnItems_.Equals(other.listAddOnItems_)) return false;
      if (TalentLevel != other.TalentLevel) return false;
      if (LastCollectIdleChestTS != other.LastCollectIdleChestTS) return false;
      if(!listClaimedIdleRewards_.Equals(other.listClaimedIdleRewards_)) return false;
      if (TotalPillFromAscend != other.TotalPillFromAscend) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalGold != 0L) hash ^= TotalGold.GetHashCode();
      if (TotalDiamond != 0L) hash ^= TotalDiamond.GetHashCode();
      if (TotalPill != 0L) hash ^= TotalPill.GetHashCode();
      if (TotalToken != 0L) hash ^= TotalToken.GetHashCode();
      if (TotalWeaponScroll != 0L) hash ^= TotalWeaponScroll.GetHashCode();
      if (TotalArmourScroll != 0L) hash ^= TotalArmourScroll.GetHashCode();
      hash ^= listHeroData_.GetHashCode();
      hash ^= listWeaponData_.GetHashCode();
      hash ^= listChestData_.GetHashCode();
      hash ^= listTalentData_.GetHashCode();
      if (manualHero_ != null) hash ^= ManualHero.GetHashCode();
      hash ^= listClaimedOneTimeRewards_.GetHashCode();
      if (TotalRareKey != 0L) hash ^= TotalRareKey.GetHashCode();
      if (TotalLegendaryKey != 0L) hash ^= TotalLegendaryKey.GetHashCode();
      if (TotalAdsRareChest != 0L) hash ^= TotalAdsRareChest.GetHashCode();
      if (TotalAdsLegendaryChest != 0L) hash ^= TotalAdsLegendaryChest.GetHashCode();
      if (TotalHeroChestKey != 0L) hash ^= TotalHeroChestKey.GetHashCode();
      hash ^= listAddOnItems_.GetHashCode();
      if (TalentLevel != 0) hash ^= TalentLevel.GetHashCode();
      if (LastCollectIdleChestTS != 0L) hash ^= LastCollectIdleChestTS.GetHashCode();
      hash ^= listClaimedIdleRewards_.GetHashCode();
      if (TotalPillFromAscend != 0L) hash ^= TotalPillFromAscend.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalGold != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TotalGold);
      }
      if (TotalDiamond != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalDiamond);
      }
      if (TotalPill != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalPill);
      }
      if (TotalToken != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalToken);
      }
      if (TotalWeaponScroll != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalWeaponScroll);
      }
      if (TotalArmourScroll != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalArmourScroll);
      }
      listHeroData_.WriteTo(output, _repeated_listHeroData_codec);
      listWeaponData_.WriteTo(output, _repeated_listWeaponData_codec);
      listChestData_.WriteTo(output, _repeated_listChestData_codec);
      listTalentData_.WriteTo(output, _repeated_listTalentData_codec);
      if (manualHero_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(ManualHero);
      }
      listClaimedOneTimeRewards_.WriteTo(output, _repeated_listClaimedOneTimeRewards_codec);
      if (TotalRareKey != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(TotalRareKey);
      }
      if (TotalLegendaryKey != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(TotalLegendaryKey);
      }
      if (TotalAdsRareChest != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(TotalAdsRareChest);
      }
      if (TotalAdsLegendaryChest != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(TotalAdsLegendaryChest);
      }
      listAddOnItems_.WriteTo(output, _repeated_listAddOnItems_codec);
      if (TalentLevel != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(TalentLevel);
      }
      if (LastCollectIdleChestTS != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(LastCollectIdleChestTS);
      }
      listClaimedIdleRewards_.WriteTo(output, _repeated_listClaimedIdleRewards_codec);
      if (TotalPillFromAscend != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(TotalPillFromAscend);
      }
      if (TotalHeroChestKey != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(TotalHeroChestKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalGold);
      }
      if (TotalDiamond != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalDiamond);
      }
      if (TotalPill != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalPill);
      }
      if (TotalToken != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalToken);
      }
      if (TotalWeaponScroll != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalWeaponScroll);
      }
      if (TotalArmourScroll != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalArmourScroll);
      }
      size += listHeroData_.CalculateSize(_repeated_listHeroData_codec);
      size += listWeaponData_.CalculateSize(_repeated_listWeaponData_codec);
      size += listChestData_.CalculateSize(_repeated_listChestData_codec);
      size += listTalentData_.CalculateSize(_repeated_listTalentData_codec);
      if (manualHero_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ManualHero);
      }
      size += listClaimedOneTimeRewards_.CalculateSize(_repeated_listClaimedOneTimeRewards_codec);
      if (TotalRareKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalRareKey);
      }
      if (TotalLegendaryKey != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalLegendaryKey);
      }
      if (TotalAdsRareChest != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalAdsRareChest);
      }
      if (TotalAdsLegendaryChest != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalAdsLegendaryChest);
      }
      if (TotalHeroChestKey != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalHeroChestKey);
      }
      size += listAddOnItems_.CalculateSize(_repeated_listAddOnItems_codec);
      if (TalentLevel != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TalentLevel);
      }
      if (LastCollectIdleChestTS != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastCollectIdleChestTS);
      }
      size += listClaimedIdleRewards_.CalculateSize(_repeated_listClaimedIdleRewards_codec);
      if (TotalPillFromAscend != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalPillFromAscend);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserInventory other) {
      if (other == null) {
        return;
      }
      if (other.TotalGold != 0L) {
        TotalGold = other.TotalGold;
      }
      if (other.TotalDiamond != 0L) {
        TotalDiamond = other.TotalDiamond;
      }
      if (other.TotalPill != 0L) {
        TotalPill = other.TotalPill;
      }
      if (other.TotalToken != 0L) {
        TotalToken = other.TotalToken;
      }
      if (other.TotalWeaponScroll != 0L) {
        TotalWeaponScroll = other.TotalWeaponScroll;
      }
      if (other.TotalArmourScroll != 0L) {
        TotalArmourScroll = other.TotalArmourScroll;
      }
      listHeroData_.Add(other.listHeroData_);
      listWeaponData_.Add(other.listWeaponData_);
      listChestData_.Add(other.listChestData_);
      listTalentData_.Add(other.listTalentData_);
      if (other.manualHero_ != null) {
        if (manualHero_ == null) {
          ManualHero = new global::com.datld.data.HeroData();
        }
        ManualHero.MergeFrom(other.ManualHero);
      }
      listClaimedOneTimeRewards_.Add(other.listClaimedOneTimeRewards_);
      if (other.TotalRareKey != 0L) {
        TotalRareKey = other.TotalRareKey;
      }
      if (other.TotalLegendaryKey != 0L) {
        TotalLegendaryKey = other.TotalLegendaryKey;
      }
      if (other.TotalAdsRareChest != 0L) {
        TotalAdsRareChest = other.TotalAdsRareChest;
      }
      if (other.TotalAdsLegendaryChest != 0L) {
        TotalAdsLegendaryChest = other.TotalAdsLegendaryChest;
      }
      if (other.TotalHeroChestKey != 0L) {
        TotalHeroChestKey = other.TotalHeroChestKey;
      }
      listAddOnItems_.Add(other.listAddOnItems_);
      if (other.TalentLevel != 0) {
        TalentLevel = other.TalentLevel;
      }
      if (other.LastCollectIdleChestTS != 0L) {
        LastCollectIdleChestTS = other.LastCollectIdleChestTS;
      }
      listClaimedIdleRewards_.Add(other.listClaimedIdleRewards_);
      if (other.TotalPillFromAscend != 0L) {
        TotalPillFromAscend = other.TotalPillFromAscend;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalGold = input.ReadInt64();
            break;
          }
          case 16: {
            TotalDiamond = input.ReadInt64();
            break;
          }
          case 24: {
            TotalPill = input.ReadInt64();
            break;
          }
          case 32: {
            TotalToken = input.ReadInt64();
            break;
          }
          case 40: {
            TotalWeaponScroll = input.ReadInt64();
            break;
          }
          case 48: {
            TotalArmourScroll = input.ReadInt64();
            break;
          }
          case 58: {
            listHeroData_.AddEntriesFrom(input, _repeated_listHeroData_codec);
            break;
          }
          case 66: {
            listWeaponData_.AddEntriesFrom(input, _repeated_listWeaponData_codec);
            break;
          }
          case 74: {
            listChestData_.AddEntriesFrom(input, _repeated_listChestData_codec);
            break;
          }
          case 82: {
            listTalentData_.AddEntriesFrom(input, _repeated_listTalentData_codec);
            break;
          }
          case 90: {
            if (manualHero_ == null) {
              ManualHero = new global::com.datld.data.HeroData();
            }
            input.ReadMessage(ManualHero);
            break;
          }
          case 98: {
            listClaimedOneTimeRewards_.AddEntriesFrom(input, _repeated_listClaimedOneTimeRewards_codec);
            break;
          }
          case 104: {
            TotalRareKey = input.ReadInt64();
            break;
          }
          case 112: {
            TotalLegendaryKey = input.ReadInt64();
            break;
          }
          case 120: {
            TotalAdsRareChest = input.ReadInt64();
            break;
          }
          case 128: {
            TotalAdsLegendaryChest = input.ReadInt64();
            break;
          }
          case 138: {
            listAddOnItems_.AddEntriesFrom(input, _repeated_listAddOnItems_codec);
            break;
          }
          case 144: {
            TalentLevel = input.ReadInt32();
            break;
          }
          case 152: {
            LastCollectIdleChestTS = input.ReadInt64();
            break;
          }
          case 162: {
            listClaimedIdleRewards_.AddEntriesFrom(input, _repeated_listClaimedIdleRewards_codec);
            break;
          }
          case 168: {
            TotalPillFromAscend = input.ReadInt64();
            break;
          }
          case 176: {
            TotalHeroChestKey = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddOnItem : pb::IMessage<AddOnItem> {
    private static readonly pb::MessageParser<AddOnItem> _parser = new pb::MessageParser<AddOnItem>(() => new AddOnItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddOnItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddOnItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddOnItem(AddOnItem other) : this() {
      itemID_ = other.itemID_;
      itemCount_ = other.itemCount_;
      status_ = other.status_;
      expiredDuration_ = other.expiredDuration_;
      isUnlimitedItem_ = other.isUnlimitedItem_;
      readyTS_ = other.readyTS_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddOnItem Clone() {
      return new AddOnItem(this);
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 1;
    private string itemID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemID {
      get { return itemID_; }
      set {
        itemID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ItemCount" field.</summary>
    public const int ItemCountFieldNumber = 2;
    private long itemCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ItemCount {
      get { return itemCount_; }
      set {
        itemCount_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 3;
    private global::com.datld.data.ITEM_STATUS status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.ITEM_STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "ExpiredDuration" field.</summary>
    public const int ExpiredDurationFieldNumber = 4;
    private long expiredDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiredDuration {
      get { return expiredDuration_; }
      set {
        expiredDuration_ = value;
      }
    }

    /// <summary>Field number for the "isUnlimitedItem" field.</summary>
    public const int IsUnlimitedItemFieldNumber = 5;
    private bool isUnlimitedItem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUnlimitedItem {
      get { return isUnlimitedItem_; }
      set {
        isUnlimitedItem_ = value;
      }
    }

    /// <summary>Field number for the "readyTS" field.</summary>
    public const int ReadyTSFieldNumber = 6;
    private long readyTS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReadyTS {
      get { return readyTS_; }
      set {
        readyTS_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddOnItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddOnItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemID != other.ItemID) return false;
      if (ItemCount != other.ItemCount) return false;
      if (Status != other.Status) return false;
      if (ExpiredDuration != other.ExpiredDuration) return false;
      if (IsUnlimitedItem != other.IsUnlimitedItem) return false;
      if (ReadyTS != other.ReadyTS) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemID.Length != 0) hash ^= ItemID.GetHashCode();
      if (ItemCount != 0L) hash ^= ItemCount.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (ExpiredDuration != 0L) hash ^= ExpiredDuration.GetHashCode();
      if (IsUnlimitedItem != false) hash ^= IsUnlimitedItem.GetHashCode();
      if (ReadyTS != 0L) hash ^= ReadyTS.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ItemID);
      }
      if (ItemCount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ItemCount);
      }
      if (Status != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Status);
      }
      if (ExpiredDuration != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ExpiredDuration);
      }
      if (IsUnlimitedItem != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsUnlimitedItem);
      }
      if (ReadyTS != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ReadyTS);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemID);
      }
      if (ItemCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ItemCount);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (ExpiredDuration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiredDuration);
      }
      if (IsUnlimitedItem != false) {
        size += 1 + 1;
      }
      if (ReadyTS != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReadyTS);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddOnItem other) {
      if (other == null) {
        return;
      }
      if (other.ItemID.Length != 0) {
        ItemID = other.ItemID;
      }
      if (other.ItemCount != 0L) {
        ItemCount = other.ItemCount;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.ExpiredDuration != 0L) {
        ExpiredDuration = other.ExpiredDuration;
      }
      if (other.IsUnlimitedItem != false) {
        IsUnlimitedItem = other.IsUnlimitedItem;
      }
      if (other.ReadyTS != 0L) {
        ReadyTS = other.ReadyTS;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ItemID = input.ReadString();
            break;
          }
          case 16: {
            ItemCount = input.ReadInt64();
            break;
          }
          case 24: {
            Status = (global::com.datld.data.ITEM_STATUS) input.ReadEnum();
            break;
          }
          case 32: {
            ExpiredDuration = input.ReadInt64();
            break;
          }
          case 40: {
            IsUnlimitedItem = input.ReadBool();
            break;
          }
          case 48: {
            ReadyTS = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TalentData : pb::IMessage<TalentData> {
    private static readonly pb::MessageParser<TalentData> _parser = new pb::MessageParser<TalentData>(() => new TalentData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TalentData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TalentData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TalentData(TalentData other) : this() {
      talentID_ = other.talentID_;
      talentLevel_ = other.talentLevel_;
      talentValue_ = other.talentValue_;
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TalentData Clone() {
      return new TalentData(this);
    }

    /// <summary>Field number for the "TalentID" field.</summary>
    public const int TalentIDFieldNumber = 1;
    private string talentID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TalentID {
      get { return talentID_; }
      set {
        talentID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TalentLevel" field.</summary>
    public const int TalentLevelFieldNumber = 2;
    private int talentLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TalentLevel {
      get { return talentLevel_; }
      set {
        talentLevel_ = value;
      }
    }

    /// <summary>Field number for the "TalentValue" field.</summary>
    public const int TalentValueFieldNumber = 3;
    private float talentValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TalentValue {
      get { return talentValue_; }
      set {
        talentValue_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::com.datld.data.ITEM_STATUS status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.ITEM_STATUS Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TalentData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TalentData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TalentID != other.TalentID) return false;
      if (TalentLevel != other.TalentLevel) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TalentValue, other.TalentValue)) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TalentID.Length != 0) hash ^= TalentID.GetHashCode();
      if (TalentLevel != 0) hash ^= TalentLevel.GetHashCode();
      if (TalentValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TalentValue);
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TalentID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TalentID);
      }
      if (TalentLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TalentLevel);
      }
      if (TalentValue != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(TalentValue);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TalentID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TalentID);
      }
      if (TalentLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TalentLevel);
      }
      if (TalentValue != 0F) {
        size += 1 + 4;
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TalentData other) {
      if (other == null) {
        return;
      }
      if (other.TalentID.Length != 0) {
        TalentID = other.TalentID;
      }
      if (other.TalentLevel != 0) {
        TalentLevel = other.TalentLevel;
      }
      if (other.TalentValue != 0F) {
        TalentValue = other.TalentValue;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TalentID = input.ReadString();
            break;
          }
          case 16: {
            TalentLevel = input.ReadInt32();
            break;
          }
          case 29: {
            TalentValue = input.ReadFloat();
            break;
          }
          case 32: {
            Status = (global::com.datld.data.ITEM_STATUS) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RewardTracker : pb::IMessage<RewardTracker> {
    private static readonly pb::MessageParser<RewardTracker> _parser = new pb::MessageParser<RewardTracker>(() => new RewardTracker());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RewardTracker> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardTracker() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardTracker(RewardTracker other) : this() {
      rewardID_ = other.rewardID_;
      earnedTS_ = other.earnedTS_;
      countEarned_ = other.countEarned_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RewardTracker Clone() {
      return new RewardTracker(this);
    }

    /// <summary>Field number for the "rewardID" field.</summary>
    public const int RewardIDFieldNumber = 1;
    private string rewardID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RewardID {
      get { return rewardID_; }
      set {
        rewardID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "earnedTS" field.</summary>
    public const int EarnedTSFieldNumber = 2;
    private long earnedTS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EarnedTS {
      get { return earnedTS_; }
      set {
        earnedTS_ = value;
      }
    }

    /// <summary>Field number for the "countEarned" field.</summary>
    public const int CountEarnedFieldNumber = 3;
    private int countEarned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CountEarned {
      get { return countEarned_; }
      set {
        countEarned_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RewardTracker);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RewardTracker other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RewardID != other.RewardID) return false;
      if (EarnedTS != other.EarnedTS) return false;
      if (CountEarned != other.CountEarned) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RewardID.Length != 0) hash ^= RewardID.GetHashCode();
      if (EarnedTS != 0L) hash ^= EarnedTS.GetHashCode();
      if (CountEarned != 0) hash ^= CountEarned.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RewardID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RewardID);
      }
      if (EarnedTS != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EarnedTS);
      }
      if (CountEarned != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CountEarned);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RewardID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RewardID);
      }
      if (EarnedTS != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EarnedTS);
      }
      if (CountEarned != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CountEarned);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RewardTracker other) {
      if (other == null) {
        return;
      }
      if (other.RewardID.Length != 0) {
        RewardID = other.RewardID;
      }
      if (other.EarnedTS != 0L) {
        EarnedTS = other.EarnedTS;
      }
      if (other.CountEarned != 0) {
        CountEarned = other.CountEarned;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RewardID = input.ReadString();
            break;
          }
          case 16: {
            EarnedTS = input.ReadInt64();
            break;
          }
          case 24: {
            CountEarned = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IdleRewardTracker : pb::IMessage<IdleRewardTracker> {
    private static readonly pb::MessageParser<IdleRewardTracker> _parser = new pb::MessageParser<IdleRewardTracker>(() => new IdleRewardTracker());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdleRewardTracker> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdleRewardTracker() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdleRewardTracker(IdleRewardTracker other) : this() {
      levelReward_ = other.levelReward_;
      listEarnedReward_ = other.listEarnedReward_.Clone();
      seasonNum_ = other.seasonNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IdleRewardTracker Clone() {
      return new IdleRewardTracker(this);
    }

    /// <summary>Field number for the "levelReward" field.</summary>
    public const int LevelRewardFieldNumber = 1;
    private int levelReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelReward {
      get { return levelReward_; }
      set {
        levelReward_ = value;
      }
    }

    /// <summary>Field number for the "listEarnedReward" field.</summary>
    public const int ListEarnedRewardFieldNumber = 2;
    private static readonly pb::FieldCodec<global::com.datld.data.RewardTracker> _repeated_listEarnedReward_codec
        = pb::FieldCodec.ForMessage(18, global::com.datld.data.RewardTracker.Parser);
    private readonly pbc::RepeatedField<global::com.datld.data.RewardTracker> listEarnedReward_ = new pbc::RepeatedField<global::com.datld.data.RewardTracker>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.datld.data.RewardTracker> ListEarnedReward {
      get { return listEarnedReward_; }
    }

    /// <summary>Field number for the "seasonNum" field.</summary>
    public const int SeasonNumFieldNumber = 3;
    private int seasonNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeasonNum {
      get { return seasonNum_; }
      set {
        seasonNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IdleRewardTracker);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IdleRewardTracker other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LevelReward != other.LevelReward) return false;
      if(!listEarnedReward_.Equals(other.listEarnedReward_)) return false;
      if (SeasonNum != other.SeasonNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LevelReward != 0) hash ^= LevelReward.GetHashCode();
      hash ^= listEarnedReward_.GetHashCode();
      if (SeasonNum != 0) hash ^= SeasonNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LevelReward != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(LevelReward);
      }
      listEarnedReward_.WriteTo(output, _repeated_listEarnedReward_codec);
      if (SeasonNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SeasonNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LevelReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelReward);
      }
      size += listEarnedReward_.CalculateSize(_repeated_listEarnedReward_codec);
      if (SeasonNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeasonNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IdleRewardTracker other) {
      if (other == null) {
        return;
      }
      if (other.LevelReward != 0) {
        LevelReward = other.LevelReward;
      }
      listEarnedReward_.Add(other.listEarnedReward_);
      if (other.SeasonNum != 0) {
        SeasonNum = other.SeasonNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LevelReward = input.ReadInt32();
            break;
          }
          case 18: {
            listEarnedReward_.AddEntriesFrom(input, _repeated_listEarnedReward_codec);
            break;
          }
          case 24: {
            SeasonNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PowerData : pb::IMessage<PowerData> {
    private static readonly pb::MessageParser<PowerData> _parser = new pb::MessageParser<PowerData>(() => new PowerData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PowerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerData(PowerData other) : this() {
      firerate_ = other.firerate_;
      percentDmg_ = other.percentDmg_;
      headshotPercent_ = other.headshotPercent_;
      critPercent_ = other.critPercent_;
      range_ = other.range_;
      hp_ = other.hp_;
      armour_ = other.armour_;
      dmg_ = other.dmg_;
      reduceSkillCountDownPercent_ = other.reduceSkillCountDownPercent_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerData Clone() {
      return new PowerData(this);
    }

    /// <summary>Field number for the "firerate" field.</summary>
    public const int FirerateFieldNumber = 1;
    private float firerate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Firerate {
      get { return firerate_; }
      set {
        firerate_ = value;
      }
    }

    /// <summary>Field number for the "percentDmg" field.</summary>
    public const int PercentDmgFieldNumber = 2;
    private float percentDmg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PercentDmg {
      get { return percentDmg_; }
      set {
        percentDmg_ = value;
      }
    }

    /// <summary>Field number for the "headshotPercent" field.</summary>
    public const int HeadshotPercentFieldNumber = 3;
    private float headshotPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeadshotPercent {
      get { return headshotPercent_; }
      set {
        headshotPercent_ = value;
      }
    }

    /// <summary>Field number for the "critPercent" field.</summary>
    public const int CritPercentFieldNumber = 4;
    private float critPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CritPercent {
      get { return critPercent_; }
      set {
        critPercent_ = value;
      }
    }

    /// <summary>Field number for the "range" field.</summary>
    public const int RangeFieldNumber = 5;
    private float range_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Range {
      get { return range_; }
      set {
        range_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 6;
    private float hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "armour" field.</summary>
    public const int ArmourFieldNumber = 7;
    private float armour_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Armour {
      get { return armour_; }
      set {
        armour_ = value;
      }
    }

    /// <summary>Field number for the "dmg" field.</summary>
    public const int DmgFieldNumber = 8;
    private float dmg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Dmg {
      get { return dmg_; }
      set {
        dmg_ = value;
      }
    }

    /// <summary>Field number for the "reduceSkillCountDownPercent" field.</summary>
    public const int ReduceSkillCountDownPercentFieldNumber = 9;
    private float reduceSkillCountDownPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ReduceSkillCountDownPercent {
      get { return reduceSkillCountDownPercent_; }
      set {
        reduceSkillCountDownPercent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PowerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PowerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Firerate, other.Firerate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PercentDmg, other.PercentDmg)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeadshotPercent, other.HeadshotPercent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CritPercent, other.CritPercent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Range, other.Range)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Hp, other.Hp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Armour, other.Armour)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Dmg, other.Dmg)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ReduceSkillCountDownPercent, other.ReduceSkillCountDownPercent)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Firerate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Firerate);
      if (PercentDmg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PercentDmg);
      if (HeadshotPercent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeadshotPercent);
      if (CritPercent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CritPercent);
      if (Range != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Range);
      if (Hp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Hp);
      if (Armour != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Armour);
      if (Dmg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Dmg);
      if (ReduceSkillCountDownPercent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ReduceSkillCountDownPercent);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Firerate != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Firerate);
      }
      if (PercentDmg != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PercentDmg);
      }
      if (HeadshotPercent != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(HeadshotPercent);
      }
      if (CritPercent != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(CritPercent);
      }
      if (Range != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Range);
      }
      if (Hp != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Hp);
      }
      if (Armour != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Armour);
      }
      if (Dmg != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Dmg);
      }
      if (ReduceSkillCountDownPercent != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(ReduceSkillCountDownPercent);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Firerate != 0F) {
        size += 1 + 4;
      }
      if (PercentDmg != 0F) {
        size += 1 + 4;
      }
      if (HeadshotPercent != 0F) {
        size += 1 + 4;
      }
      if (CritPercent != 0F) {
        size += 1 + 4;
      }
      if (Range != 0F) {
        size += 1 + 4;
      }
      if (Hp != 0F) {
        size += 1 + 4;
      }
      if (Armour != 0F) {
        size += 1 + 4;
      }
      if (Dmg != 0F) {
        size += 1 + 4;
      }
      if (ReduceSkillCountDownPercent != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PowerData other) {
      if (other == null) {
        return;
      }
      if (other.Firerate != 0F) {
        Firerate = other.Firerate;
      }
      if (other.PercentDmg != 0F) {
        PercentDmg = other.PercentDmg;
      }
      if (other.HeadshotPercent != 0F) {
        HeadshotPercent = other.HeadshotPercent;
      }
      if (other.CritPercent != 0F) {
        CritPercent = other.CritPercent;
      }
      if (other.Range != 0F) {
        Range = other.Range;
      }
      if (other.Hp != 0F) {
        Hp = other.Hp;
      }
      if (other.Armour != 0F) {
        Armour = other.Armour;
      }
      if (other.Dmg != 0F) {
        Dmg = other.Dmg;
      }
      if (other.ReduceSkillCountDownPercent != 0F) {
        ReduceSkillCountDownPercent = other.ReduceSkillCountDownPercent;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Firerate = input.ReadFloat();
            break;
          }
          case 21: {
            PercentDmg = input.ReadFloat();
            break;
          }
          case 29: {
            HeadshotPercent = input.ReadFloat();
            break;
          }
          case 37: {
            CritPercent = input.ReadFloat();
            break;
          }
          case 45: {
            Range = input.ReadFloat();
            break;
          }
          case 53: {
            Hp = input.ReadFloat();
            break;
          }
          case 61: {
            Armour = input.ReadFloat();
            break;
          }
          case 69: {
            Dmg = input.ReadFloat();
            break;
          }
          case 77: {
            ReduceSkillCountDownPercent = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroData : pb::IMessage<HeroData> {
    private static readonly pb::MessageParser<HeroData> _parser = new pb::MessageParser<HeroData>(() => new HeroData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroData(HeroData other) : this() {
      uniqueID_ = other.uniqueID_;
      type_ = other.type_;
      level_ = other.level_;
      rank_ = other.rank_;
      baseHeroPower_ = other.baseHeroPower_ != null ? other.baseHeroPower_.Clone() : null;
      equippedWeapon_ = other.equippedWeapon_;
      equippedArmour_ = other.equippedArmour_;
      finalPowerData_ = other.finalPowerData_ != null ? other.finalPowerData_.Clone() : null;
      itemStatus_ = other.itemStatus_;
      idleUpradedPower_ = other.idleUpradedPower_ != null ? other.idleUpradedPower_.Clone() : null;
      idleLevel_ = other.idleLevel_;
      idleRank_ = other.idleRank_;
      listUltimates_ = other.listUltimates_.Clone();
      initPassiveSkill_ = other.initPassiveSkill_;
      listWeaponAttributes_ = other.listWeaponAttributes_.Clone();
      listArmourAttributes_ = other.listArmourAttributes_.Clone();
      currentExp_ = other.currentExp_;
      targetExp_ = other.targetExp_;
      currentShard_ = other.currentShard_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroData Clone() {
      return new HeroData(this);
    }

    /// <summary>Field number for the "uniqueID" field.</summary>
    public const int UniqueIDFieldNumber = 1;
    private string uniqueID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UniqueID {
      get { return uniqueID_; }
      set {
        uniqueID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::com.datld.data.HeroData.Types.HERO_TYPE type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.HeroData.Types.HERO_TYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 4;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "baseHeroPower" field.</summary>
    public const int BaseHeroPowerFieldNumber = 5;
    private global::com.datld.data.PowerData baseHeroPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.PowerData BaseHeroPower {
      get { return baseHeroPower_; }
      set {
        baseHeroPower_ = value;
      }
    }

    /// <summary>Field number for the "equippedWeapon" field.</summary>
    public const int EquippedWeaponFieldNumber = 6;
    private string equippedWeapon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EquippedWeapon {
      get { return equippedWeapon_; }
      set {
        equippedWeapon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "equippedArmour" field.</summary>
    public const int EquippedArmourFieldNumber = 7;
    private string equippedArmour_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EquippedArmour {
      get { return equippedArmour_; }
      set {
        equippedArmour_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "finalPowerData" field.</summary>
    public const int FinalPowerDataFieldNumber = 8;
    private global::com.datld.data.PowerData finalPowerData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.PowerData FinalPowerData {
      get { return finalPowerData_; }
      set {
        finalPowerData_ = value;
      }
    }

    /// <summary>Field number for the "itemStatus" field.</summary>
    public const int ItemStatusFieldNumber = 9;
    private global::com.datld.data.ITEM_STATUS itemStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.ITEM_STATUS ItemStatus {
      get { return itemStatus_; }
      set {
        itemStatus_ = value;
      }
    }

    /// <summary>Field number for the "idleUpradedPower" field.</summary>
    public const int IdleUpradedPowerFieldNumber = 10;
    private global::com.datld.data.PowerData idleUpradedPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.PowerData IdleUpradedPower {
      get { return idleUpradedPower_; }
      set {
        idleUpradedPower_ = value;
      }
    }

    /// <summary>Field number for the "idleLevel" field.</summary>
    public const int IdleLevelFieldNumber = 11;
    private int idleLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdleLevel {
      get { return idleLevel_; }
      set {
        idleLevel_ = value;
      }
    }

    /// <summary>Field number for the "idleRank" field.</summary>
    public const int IdleRankFieldNumber = 12;
    private int idleRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdleRank {
      get { return idleRank_; }
      set {
        idleRank_ = value;
      }
    }

    /// <summary>Field number for the "listUltimates" field.</summary>
    public const int ListUltimatesFieldNumber = 13;
    private static readonly pb::FieldCodec<string> _repeated_listUltimates_codec
        = pb::FieldCodec.ForString(106);
    private readonly pbc::RepeatedField<string> listUltimates_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///Skills &amp; passives
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ListUltimates {
      get { return listUltimates_; }
    }

    /// <summary>Field number for the "InitPassiveSkill" field.</summary>
    public const int InitPassiveSkillFieldNumber = 14;
    private string initPassiveSkill_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InitPassiveSkill {
      get { return initPassiveSkill_; }
      set {
        initPassiveSkill_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "listWeaponAttributes" field.</summary>
    public const int ListWeaponAttributesFieldNumber = 15;
    private static readonly pb::FieldCodec<global::com.datld.data.AttributeData> _repeated_listWeaponAttributes_codec
        = pb::FieldCodec.ForMessage(122, global::com.datld.data.AttributeData.Parser);
    private readonly pbc::RepeatedField<global::com.datld.data.AttributeData> listWeaponAttributes_ = new pbc::RepeatedField<global::com.datld.data.AttributeData>();
    /// <summary>
    ///Weapon Atributes &amp; Armour Attribute
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.datld.data.AttributeData> ListWeaponAttributes {
      get { return listWeaponAttributes_; }
    }

    /// <summary>Field number for the "listArmourAttributes" field.</summary>
    public const int ListArmourAttributesFieldNumber = 16;
    private static readonly pb::FieldCodec<global::com.datld.data.AttributeData> _repeated_listArmourAttributes_codec
        = pb::FieldCodec.ForMessage(130, global::com.datld.data.AttributeData.Parser);
    private readonly pbc::RepeatedField<global::com.datld.data.AttributeData> listArmourAttributes_ = new pbc::RepeatedField<global::com.datld.data.AttributeData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.datld.data.AttributeData> ListArmourAttributes {
      get { return listArmourAttributes_; }
    }

    /// <summary>Field number for the "currentExp" field.</summary>
    public const int CurrentExpFieldNumber = 17;
    private long currentExp_;
    /// <summary>
    ///Angel only!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrentExp {
      get { return currentExp_; }
      set {
        currentExp_ = value;
      }
    }

    /// <summary>Field number for the "targetExp" field.</summary>
    public const int TargetExpFieldNumber = 18;
    private long targetExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TargetExp {
      get { return targetExp_; }
      set {
        targetExp_ = value;
      }
    }

    /// <summary>Field number for the "currentShard" field.</summary>
    public const int CurrentShardFieldNumber = 19;
    private int currentShard_;
    /// <summary>
    ///shard hero
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentShard {
      get { return currentShard_; }
      set {
        currentShard_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueID != other.UniqueID) return false;
      if (Type != other.Type) return false;
      if (Level != other.Level) return false;
      if (Rank != other.Rank) return false;
      if (!object.Equals(BaseHeroPower, other.BaseHeroPower)) return false;
      if (EquippedWeapon != other.EquippedWeapon) return false;
      if (EquippedArmour != other.EquippedArmour) return false;
      if (!object.Equals(FinalPowerData, other.FinalPowerData)) return false;
      if (ItemStatus != other.ItemStatus) return false;
      if (!object.Equals(IdleUpradedPower, other.IdleUpradedPower)) return false;
      if (IdleLevel != other.IdleLevel) return false;
      if (IdleRank != other.IdleRank) return false;
      if(!listUltimates_.Equals(other.listUltimates_)) return false;
      if (InitPassiveSkill != other.InitPassiveSkill) return false;
      if(!listWeaponAttributes_.Equals(other.listWeaponAttributes_)) return false;
      if(!listArmourAttributes_.Equals(other.listArmourAttributes_)) return false;
      if (CurrentExp != other.CurrentExp) return false;
      if (TargetExp != other.TargetExp) return false;
      if (CurrentShard != other.CurrentShard) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueID.Length != 0) hash ^= UniqueID.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (baseHeroPower_ != null) hash ^= BaseHeroPower.GetHashCode();
      if (EquippedWeapon.Length != 0) hash ^= EquippedWeapon.GetHashCode();
      if (EquippedArmour.Length != 0) hash ^= EquippedArmour.GetHashCode();
      if (finalPowerData_ != null) hash ^= FinalPowerData.GetHashCode();
      if (ItemStatus != 0) hash ^= ItemStatus.GetHashCode();
      if (idleUpradedPower_ != null) hash ^= IdleUpradedPower.GetHashCode();
      if (IdleLevel != 0) hash ^= IdleLevel.GetHashCode();
      if (IdleRank != 0) hash ^= IdleRank.GetHashCode();
      hash ^= listUltimates_.GetHashCode();
      if (InitPassiveSkill.Length != 0) hash ^= InitPassiveSkill.GetHashCode();
      hash ^= listWeaponAttributes_.GetHashCode();
      hash ^= listArmourAttributes_.GetHashCode();
      if (CurrentExp != 0L) hash ^= CurrentExp.GetHashCode();
      if (TargetExp != 0L) hash ^= TargetExp.GetHashCode();
      if (CurrentShard != 0) hash ^= CurrentShard.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UniqueID);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Rank != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Rank);
      }
      if (baseHeroPower_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BaseHeroPower);
      }
      if (EquippedWeapon.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(EquippedWeapon);
      }
      if (EquippedArmour.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(EquippedArmour);
      }
      if (finalPowerData_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(FinalPowerData);
      }
      if (ItemStatus != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) ItemStatus);
      }
      if (idleUpradedPower_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(IdleUpradedPower);
      }
      if (IdleLevel != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(IdleLevel);
      }
      if (IdleRank != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(IdleRank);
      }
      listUltimates_.WriteTo(output, _repeated_listUltimates_codec);
      if (InitPassiveSkill.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(InitPassiveSkill);
      }
      listWeaponAttributes_.WriteTo(output, _repeated_listWeaponAttributes_codec);
      listArmourAttributes_.WriteTo(output, _repeated_listArmourAttributes_codec);
      if (CurrentExp != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(CurrentExp);
      }
      if (TargetExp != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(TargetExp);
      }
      if (CurrentShard != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(CurrentShard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueID);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (baseHeroPower_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseHeroPower);
      }
      if (EquippedWeapon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EquippedWeapon);
      }
      if (EquippedArmour.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EquippedArmour);
      }
      if (finalPowerData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FinalPowerData);
      }
      if (ItemStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ItemStatus);
      }
      if (idleUpradedPower_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdleUpradedPower);
      }
      if (IdleLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdleLevel);
      }
      if (IdleRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdleRank);
      }
      size += listUltimates_.CalculateSize(_repeated_listUltimates_codec);
      if (InitPassiveSkill.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InitPassiveSkill);
      }
      size += listWeaponAttributes_.CalculateSize(_repeated_listWeaponAttributes_codec);
      size += listArmourAttributes_.CalculateSize(_repeated_listArmourAttributes_codec);
      if (CurrentExp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CurrentExp);
      }
      if (TargetExp != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TargetExp);
      }
      if (CurrentShard != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CurrentShard);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroData other) {
      if (other == null) {
        return;
      }
      if (other.UniqueID.Length != 0) {
        UniqueID = other.UniqueID;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.baseHeroPower_ != null) {
        if (baseHeroPower_ == null) {
          BaseHeroPower = new global::com.datld.data.PowerData();
        }
        BaseHeroPower.MergeFrom(other.BaseHeroPower);
      }
      if (other.EquippedWeapon.Length != 0) {
        EquippedWeapon = other.EquippedWeapon;
      }
      if (other.EquippedArmour.Length != 0) {
        EquippedArmour = other.EquippedArmour;
      }
      if (other.finalPowerData_ != null) {
        if (finalPowerData_ == null) {
          FinalPowerData = new global::com.datld.data.PowerData();
        }
        FinalPowerData.MergeFrom(other.FinalPowerData);
      }
      if (other.ItemStatus != 0) {
        ItemStatus = other.ItemStatus;
      }
      if (other.idleUpradedPower_ != null) {
        if (idleUpradedPower_ == null) {
          IdleUpradedPower = new global::com.datld.data.PowerData();
        }
        IdleUpradedPower.MergeFrom(other.IdleUpradedPower);
      }
      if (other.IdleLevel != 0) {
        IdleLevel = other.IdleLevel;
      }
      if (other.IdleRank != 0) {
        IdleRank = other.IdleRank;
      }
      listUltimates_.Add(other.listUltimates_);
      if (other.InitPassiveSkill.Length != 0) {
        InitPassiveSkill = other.InitPassiveSkill;
      }
      listWeaponAttributes_.Add(other.listWeaponAttributes_);
      listArmourAttributes_.Add(other.listArmourAttributes_);
      if (other.CurrentExp != 0L) {
        CurrentExp = other.CurrentExp;
      }
      if (other.TargetExp != 0L) {
        TargetExp = other.TargetExp;
      }
      if (other.CurrentShard != 0) {
        CurrentShard = other.CurrentShard;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UniqueID = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::com.datld.data.HeroData.Types.HERO_TYPE) input.ReadEnum();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Rank = input.ReadInt32();
            break;
          }
          case 42: {
            if (baseHeroPower_ == null) {
              BaseHeroPower = new global::com.datld.data.PowerData();
            }
            input.ReadMessage(BaseHeroPower);
            break;
          }
          case 50: {
            EquippedWeapon = input.ReadString();
            break;
          }
          case 58: {
            EquippedArmour = input.ReadString();
            break;
          }
          case 66: {
            if (finalPowerData_ == null) {
              FinalPowerData = new global::com.datld.data.PowerData();
            }
            input.ReadMessage(FinalPowerData);
            break;
          }
          case 72: {
            ItemStatus = (global::com.datld.data.ITEM_STATUS) input.ReadEnum();
            break;
          }
          case 82: {
            if (idleUpradedPower_ == null) {
              IdleUpradedPower = new global::com.datld.data.PowerData();
            }
            input.ReadMessage(IdleUpradedPower);
            break;
          }
          case 88: {
            IdleLevel = input.ReadInt32();
            break;
          }
          case 96: {
            IdleRank = input.ReadInt32();
            break;
          }
          case 106: {
            listUltimates_.AddEntriesFrom(input, _repeated_listUltimates_codec);
            break;
          }
          case 114: {
            InitPassiveSkill = input.ReadString();
            break;
          }
          case 122: {
            listWeaponAttributes_.AddEntriesFrom(input, _repeated_listWeaponAttributes_codec);
            break;
          }
          case 130: {
            listArmourAttributes_.AddEntriesFrom(input, _repeated_listArmourAttributes_codec);
            break;
          }
          case 136: {
            CurrentExp = input.ReadInt64();
            break;
          }
          case 144: {
            TargetExp = input.ReadInt64();
            break;
          }
          case 152: {
            CurrentShard = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HeroData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum HERO_TYPE {
        [pbr::OriginalName("ASSAULT")] Assault = 0,
        [pbr::OriginalName("SPY")] Spy = 1,
        [pbr::OriginalName("ENGINEER")] Engineer = 2,
      }

    }
    #endregion

  }

  public sealed partial class AttributeData : pb::IMessage<AttributeData> {
    private static readonly pb::MessageParser<AttributeData> _parser = new pb::MessageParser<AttributeData>(() => new AttributeData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttributeData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeData(AttributeData other) : this() {
      attributeID_ = other.attributeID_;
      attributeValue_ = other.attributeValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeData Clone() {
      return new AttributeData(this);
    }

    /// <summary>Field number for the "AttributeID" field.</summary>
    public const int AttributeIDFieldNumber = 1;
    private string attributeID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AttributeID {
      get { return attributeID_; }
      set {
        attributeID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AttributeValue" field.</summary>
    public const int AttributeValueFieldNumber = 2;
    private float attributeValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttributeValue {
      get { return attributeValue_; }
      set {
        attributeValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttributeData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttributeData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttributeID != other.AttributeID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttributeValue, other.AttributeValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttributeID.Length != 0) hash ^= AttributeID.GetHashCode();
      if (AttributeValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttributeValue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttributeID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AttributeID);
      }
      if (AttributeValue != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(AttributeValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttributeID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AttributeID);
      }
      if (AttributeValue != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttributeData other) {
      if (other == null) {
        return;
      }
      if (other.AttributeID.Length != 0) {
        AttributeID = other.AttributeID;
      }
      if (other.AttributeValue != 0F) {
        AttributeValue = other.AttributeValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AttributeID = input.ReadString();
            break;
          }
          case 21: {
            AttributeValue = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WeaponData : pb::IMessage<WeaponData> {
    private static readonly pb::MessageParser<WeaponData> _parser = new pb::MessageParser<WeaponData>(() => new WeaponData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeaponData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponData(WeaponData other) : this() {
      uniqueID_ = other.uniqueID_;
      weaponID_ = other.weaponID_;
      level_ = other.level_;
      rank_ = other.rank_;
      defaultPower_ = other.defaultPower_ != null ? other.defaultPower_.Clone() : null;
      upgradedPower_ = other.upgradedPower_ != null ? other.upgradedPower_.Clone() : null;
      finalPowerData_ = other.finalPowerData_ != null ? other.finalPowerData_.Clone() : null;
      itemStatus_ = other.itemStatus_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeaponData Clone() {
      return new WeaponData(this);
    }

    /// <summary>Field number for the "uniqueID" field.</summary>
    public const int UniqueIDFieldNumber = 1;
    private string uniqueID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UniqueID {
      get { return uniqueID_; }
      set {
        uniqueID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "weaponID" field.</summary>
    public const int WeaponIDFieldNumber = 2;
    private string weaponID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WeaponID {
      get { return weaponID_; }
      set {
        weaponID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 4;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "defaultPower" field.</summary>
    public const int DefaultPowerFieldNumber = 5;
    private global::com.datld.data.PowerData defaultPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.PowerData DefaultPower {
      get { return defaultPower_; }
      set {
        defaultPower_ = value;
      }
    }

    /// <summary>Field number for the "upgradedPower" field.</summary>
    public const int UpgradedPowerFieldNumber = 6;
    private global::com.datld.data.PowerData upgradedPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.PowerData UpgradedPower {
      get { return upgradedPower_; }
      set {
        upgradedPower_ = value;
      }
    }

    /// <summary>Field number for the "finalPowerData" field.</summary>
    public const int FinalPowerDataFieldNumber = 7;
    private global::com.datld.data.PowerData finalPowerData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.PowerData FinalPowerData {
      get { return finalPowerData_; }
      set {
        finalPowerData_ = value;
      }
    }

    /// <summary>Field number for the "itemStatus" field.</summary>
    public const int ItemStatusFieldNumber = 8;
    private global::com.datld.data.ITEM_STATUS itemStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.ITEM_STATUS ItemStatus {
      get { return itemStatus_; }
      set {
        itemStatus_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 9;
    private global::com.datld.data.WEAPON_TYPE type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.WEAPON_TYPE Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeaponData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeaponData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueID != other.UniqueID) return false;
      if (WeaponID != other.WeaponID) return false;
      if (Level != other.Level) return false;
      if (Rank != other.Rank) return false;
      if (!object.Equals(DefaultPower, other.DefaultPower)) return false;
      if (!object.Equals(UpgradedPower, other.UpgradedPower)) return false;
      if (!object.Equals(FinalPowerData, other.FinalPowerData)) return false;
      if (ItemStatus != other.ItemStatus) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueID.Length != 0) hash ^= UniqueID.GetHashCode();
      if (WeaponID.Length != 0) hash ^= WeaponID.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (defaultPower_ != null) hash ^= DefaultPower.GetHashCode();
      if (upgradedPower_ != null) hash ^= UpgradedPower.GetHashCode();
      if (finalPowerData_ != null) hash ^= FinalPowerData.GetHashCode();
      if (ItemStatus != 0) hash ^= ItemStatus.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UniqueID);
      }
      if (WeaponID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(WeaponID);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (Rank != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Rank);
      }
      if (defaultPower_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DefaultPower);
      }
      if (upgradedPower_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(UpgradedPower);
      }
      if (finalPowerData_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(FinalPowerData);
      }
      if (ItemStatus != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) ItemStatus);
      }
      if (Type != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueID);
      }
      if (WeaponID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WeaponID);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (defaultPower_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultPower);
      }
      if (upgradedPower_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpgradedPower);
      }
      if (finalPowerData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FinalPowerData);
      }
      if (ItemStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ItemStatus);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeaponData other) {
      if (other == null) {
        return;
      }
      if (other.UniqueID.Length != 0) {
        UniqueID = other.UniqueID;
      }
      if (other.WeaponID.Length != 0) {
        WeaponID = other.WeaponID;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.defaultPower_ != null) {
        if (defaultPower_ == null) {
          DefaultPower = new global::com.datld.data.PowerData();
        }
        DefaultPower.MergeFrom(other.DefaultPower);
      }
      if (other.upgradedPower_ != null) {
        if (upgradedPower_ == null) {
          UpgradedPower = new global::com.datld.data.PowerData();
        }
        UpgradedPower.MergeFrom(other.UpgradedPower);
      }
      if (other.finalPowerData_ != null) {
        if (finalPowerData_ == null) {
          FinalPowerData = new global::com.datld.data.PowerData();
        }
        FinalPowerData.MergeFrom(other.FinalPowerData);
      }
      if (other.ItemStatus != 0) {
        ItemStatus = other.ItemStatus;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UniqueID = input.ReadString();
            break;
          }
          case 18: {
            WeaponID = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            Rank = input.ReadInt32();
            break;
          }
          case 42: {
            if (defaultPower_ == null) {
              DefaultPower = new global::com.datld.data.PowerData();
            }
            input.ReadMessage(DefaultPower);
            break;
          }
          case 50: {
            if (upgradedPower_ == null) {
              UpgradedPower = new global::com.datld.data.PowerData();
            }
            input.ReadMessage(UpgradedPower);
            break;
          }
          case 58: {
            if (finalPowerData_ == null) {
              FinalPowerData = new global::com.datld.data.PowerData();
            }
            input.ReadMessage(FinalPowerData);
            break;
          }
          case 64: {
            ItemStatus = (global::com.datld.data.ITEM_STATUS) input.ReadEnum();
            break;
          }
          case 72: {
            Type = (global::com.datld.data.WEAPON_TYPE) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChestData : pb::IMessage<ChestData> {
    private static readonly pb::MessageParser<ChestData> _parser = new pb::MessageParser<ChestData>(() => new ChestData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChestData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChestData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChestData(ChestData other) : this() {
      uniqueID_ = other.uniqueID_;
      chestType_ = other.chestType_;
      itemStatus_ = other.itemStatus_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChestData Clone() {
      return new ChestData(this);
    }

    /// <summary>Field number for the "uniqueID" field.</summary>
    public const int UniqueIDFieldNumber = 1;
    private string uniqueID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UniqueID {
      get { return uniqueID_; }
      set {
        uniqueID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chestType" field.</summary>
    public const int ChestTypeFieldNumber = 2;
    private string chestType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChestType {
      get { return chestType_; }
      set {
        chestType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "itemStatus" field.</summary>
    public const int ItemStatusFieldNumber = 3;
    private global::com.datld.data.ITEM_STATUS itemStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.ITEM_STATUS ItemStatus {
      get { return itemStatus_; }
      set {
        itemStatus_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChestData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChestData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UniqueID != other.UniqueID) return false;
      if (ChestType != other.ChestType) return false;
      if (ItemStatus != other.ItemStatus) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UniqueID.Length != 0) hash ^= UniqueID.GetHashCode();
      if (ChestType.Length != 0) hash ^= ChestType.GetHashCode();
      if (ItemStatus != 0) hash ^= ItemStatus.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UniqueID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UniqueID);
      }
      if (ChestType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ChestType);
      }
      if (ItemStatus != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ItemStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UniqueID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueID);
      }
      if (ChestType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChestType);
      }
      if (ItemStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ItemStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChestData other) {
      if (other == null) {
        return;
      }
      if (other.UniqueID.Length != 0) {
        UniqueID = other.UniqueID;
      }
      if (other.ChestType.Length != 0) {
        ChestType = other.ChestType;
      }
      if (other.ItemStatus != 0) {
        ItemStatus = other.ItemStatus;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UniqueID = input.ReadString();
            break;
          }
          case 18: {
            ChestType = input.ReadString();
            break;
          }
          case 24: {
            ItemStatus = (global::com.datld.data.ITEM_STATUS) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameData : pb::IMessage<GameData> {
    private static readonly pb::MessageParser<GameData> _parser = new pb::MessageParser<GameData>(() => new GameData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameData(GameData other) : this() {
      campaignProgress_ = other.campaignProgress_ != null ? other.campaignProgress_.Clone() : null;
      idleProgress_ = other.idleProgress_ != null ? other.idleProgress_.Clone() : null;
      teamSlots_ = other.teamSlots_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameData Clone() {
      return new GameData(this);
    }

    /// <summary>Field number for the "campaignProgress" field.</summary>
    public const int CampaignProgressFieldNumber = 1;
    private global::com.datld.data.PlayProgress campaignProgress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.PlayProgress CampaignProgress {
      get { return campaignProgress_; }
      set {
        campaignProgress_ = value;
      }
    }

    /// <summary>Field number for the "idleProgress" field.</summary>
    public const int IdleProgressFieldNumber = 2;
    private global::com.datld.data.PlayProgress idleProgress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.PlayProgress IdleProgress {
      get { return idleProgress_; }
      set {
        idleProgress_ = value;
      }
    }

    /// <summary>Field number for the "TeamSlots" field.</summary>
    public const int TeamSlotsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_teamSlots_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> teamSlots_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TeamSlots {
      get { return teamSlots_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CampaignProgress, other.CampaignProgress)) return false;
      if (!object.Equals(IdleProgress, other.IdleProgress)) return false;
      if(!teamSlots_.Equals(other.teamSlots_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (campaignProgress_ != null) hash ^= CampaignProgress.GetHashCode();
      if (idleProgress_ != null) hash ^= IdleProgress.GetHashCode();
      hash ^= teamSlots_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (campaignProgress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CampaignProgress);
      }
      if (idleProgress_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(IdleProgress);
      }
      teamSlots_.WriteTo(output, _repeated_teamSlots_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (campaignProgress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CampaignProgress);
      }
      if (idleProgress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(IdleProgress);
      }
      size += teamSlots_.CalculateSize(_repeated_teamSlots_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameData other) {
      if (other == null) {
        return;
      }
      if (other.campaignProgress_ != null) {
        if (campaignProgress_ == null) {
          CampaignProgress = new global::com.datld.data.PlayProgress();
        }
        CampaignProgress.MergeFrom(other.CampaignProgress);
      }
      if (other.idleProgress_ != null) {
        if (idleProgress_ == null) {
          IdleProgress = new global::com.datld.data.PlayProgress();
        }
        IdleProgress.MergeFrom(other.IdleProgress);
      }
      teamSlots_.Add(other.teamSlots_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (campaignProgress_ == null) {
              CampaignProgress = new global::com.datld.data.PlayProgress();
            }
            input.ReadMessage(CampaignProgress);
            break;
          }
          case 18: {
            if (idleProgress_ == null) {
              IdleProgress = new global::com.datld.data.PlayProgress();
            }
            input.ReadMessage(IdleProgress);
            break;
          }
          case 26: {
            teamSlots_.AddEntriesFrom(input, _repeated_teamSlots_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayProgress : pb::IMessage<PlayProgress> {
    private static readonly pb::MessageParser<PlayProgress> _parser = new pb::MessageParser<PlayProgress>(() => new PlayProgress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayProgress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayProgress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayProgress(PlayProgress other) : this() {
      currentLevel_ = other.currentLevel_;
      currentWave_ = other.currentWave_;
      maxLevel_ = other.maxLevel_;
      lastLogoutTS_ = other.lastLogoutTS_;
      collectedValue_ = other.collectedValue_;
      totalTimePlayed_ = other.totalTimePlayed_;
      resetModeTS_ = other.resetModeTS_;
      seasonNum_ = other.seasonNum_;
      countPlayGame_ = other.countPlayGame_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayProgress Clone() {
      return new PlayProgress(this);
    }

    /// <summary>Field number for the "currentLevel" field.</summary>
    public const int CurrentLevelFieldNumber = 1;
    private int currentLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentLevel {
      get { return currentLevel_; }
      set {
        currentLevel_ = value;
      }
    }

    /// <summary>Field number for the "currentWave" field.</summary>
    public const int CurrentWaveFieldNumber = 2;
    private int currentWave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentWave {
      get { return currentWave_; }
      set {
        currentWave_ = value;
      }
    }

    /// <summary>Field number for the "maxLevel" field.</summary>
    public const int MaxLevelFieldNumber = 3;
    private int maxLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxLevel {
      get { return maxLevel_; }
      set {
        maxLevel_ = value;
      }
    }

    /// <summary>Field number for the "lastLogoutTS" field.</summary>
    public const int LastLogoutTSFieldNumber = 4;
    private long lastLogoutTS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastLogoutTS {
      get { return lastLogoutTS_; }
      set {
        lastLogoutTS_ = value;
      }
    }

    /// <summary>Field number for the "collectedValue" field.</summary>
    public const int CollectedValueFieldNumber = 5;
    private long collectedValue_;
    /// <summary>
    /// for extra item collect 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CollectedValue {
      get { return collectedValue_; }
      set {
        collectedValue_ = value;
      }
    }

    /// <summary>Field number for the "totalTimePlayed" field.</summary>
    public const int TotalTimePlayedFieldNumber = 6;
    private long totalTimePlayed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalTimePlayed {
      get { return totalTimePlayed_; }
      set {
        totalTimePlayed_ = value;
      }
    }

    /// <summary>Field number for the "resetModeTS" field.</summary>
    public const int ResetModeTSFieldNumber = 7;
    private long resetModeTS_;
    /// <summary>
    ///for idle mode only!!!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ResetModeTS {
      get { return resetModeTS_; }
      set {
        resetModeTS_ = value;
      }
    }

    /// <summary>Field number for the "seasonNum" field.</summary>
    public const int SeasonNumFieldNumber = 8;
    private int seasonNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeasonNum {
      get { return seasonNum_; }
      set {
        seasonNum_ = value;
      }
    }

    /// <summary>Field number for the "countPlayGame" field.</summary>
    public const int CountPlayGameFieldNumber = 9;
    private int countPlayGame_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CountPlayGame {
      get { return countPlayGame_; }
      set {
        countPlayGame_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayProgress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayProgress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentLevel != other.CurrentLevel) return false;
      if (CurrentWave != other.CurrentWave) return false;
      if (MaxLevel != other.MaxLevel) return false;
      if (LastLogoutTS != other.LastLogoutTS) return false;
      if (CollectedValue != other.CollectedValue) return false;
      if (TotalTimePlayed != other.TotalTimePlayed) return false;
      if (ResetModeTS != other.ResetModeTS) return false;
      if (SeasonNum != other.SeasonNum) return false;
      if (CountPlayGame != other.CountPlayGame) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentLevel != 0) hash ^= CurrentLevel.GetHashCode();
      if (CurrentWave != 0) hash ^= CurrentWave.GetHashCode();
      if (MaxLevel != 0) hash ^= MaxLevel.GetHashCode();
      if (LastLogoutTS != 0L) hash ^= LastLogoutTS.GetHashCode();
      if (CollectedValue != 0L) hash ^= CollectedValue.GetHashCode();
      if (TotalTimePlayed != 0L) hash ^= TotalTimePlayed.GetHashCode();
      if (ResetModeTS != 0L) hash ^= ResetModeTS.GetHashCode();
      if (SeasonNum != 0) hash ^= SeasonNum.GetHashCode();
      if (CountPlayGame != 0) hash ^= CountPlayGame.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentLevel);
      }
      if (CurrentWave != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrentWave);
      }
      if (MaxLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxLevel);
      }
      if (LastLogoutTS != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(LastLogoutTS);
      }
      if (CollectedValue != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CollectedValue);
      }
      if (TotalTimePlayed != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalTimePlayed);
      }
      if (ResetModeTS != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ResetModeTS);
      }
      if (SeasonNum != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(SeasonNum);
      }
      if (CountPlayGame != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CountPlayGame);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentLevel);
      }
      if (CurrentWave != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentWave);
      }
      if (MaxLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxLevel);
      }
      if (LastLogoutTS != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastLogoutTS);
      }
      if (CollectedValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CollectedValue);
      }
      if (TotalTimePlayed != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalTimePlayed);
      }
      if (ResetModeTS != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ResetModeTS);
      }
      if (SeasonNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeasonNum);
      }
      if (CountPlayGame != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CountPlayGame);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayProgress other) {
      if (other == null) {
        return;
      }
      if (other.CurrentLevel != 0) {
        CurrentLevel = other.CurrentLevel;
      }
      if (other.CurrentWave != 0) {
        CurrentWave = other.CurrentWave;
      }
      if (other.MaxLevel != 0) {
        MaxLevel = other.MaxLevel;
      }
      if (other.LastLogoutTS != 0L) {
        LastLogoutTS = other.LastLogoutTS;
      }
      if (other.CollectedValue != 0L) {
        CollectedValue = other.CollectedValue;
      }
      if (other.TotalTimePlayed != 0L) {
        TotalTimePlayed = other.TotalTimePlayed;
      }
      if (other.ResetModeTS != 0L) {
        ResetModeTS = other.ResetModeTS;
      }
      if (other.SeasonNum != 0) {
        SeasonNum = other.SeasonNum;
      }
      if (other.CountPlayGame != 0) {
        CountPlayGame = other.CountPlayGame;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurrentLevel = input.ReadInt32();
            break;
          }
          case 16: {
            CurrentWave = input.ReadInt32();
            break;
          }
          case 24: {
            MaxLevel = input.ReadInt32();
            break;
          }
          case 32: {
            LastLogoutTS = input.ReadInt64();
            break;
          }
          case 40: {
            CollectedValue = input.ReadInt64();
            break;
          }
          case 48: {
            TotalTimePlayed = input.ReadInt64();
            break;
          }
          case 56: {
            ResetModeTS = input.ReadInt64();
            break;
          }
          case 64: {
            SeasonNum = input.ReadInt32();
            break;
          }
          case 72: {
            CountPlayGame = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShopData : pb::IMessage<ShopData> {
    private static readonly pb::MessageParser<ShopData> _parser = new pb::MessageParser<ShopData>(() => new ShopData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopData(ShopData other) : this() {
      lastReceiveFreeAdsRareChestTime_ = other.lastReceiveFreeAdsRareChestTime_;
      lastReceiveFreeAdsLegendaryChestTime_ = other.lastReceiveFreeAdsLegendaryChestTime_;
      stackFreeAdsRareChestTime_ = other.stackFreeAdsRareChestTime_;
      stackFreeAdsLegendaryChestTime_ = other.stackFreeAdsLegendaryChestTime_;
      stackChestEquipRank_ = other.stackChestEquipRank_.Clone();
      lastDayResetFreeStuff_ = other.lastDayResetFreeStuff_;
      currentIndexFreeStuff_ = other.currentIndexFreeStuff_;
      hasPurchaseIAP_ = other.hasPurchaseIAP_;
      boughtPromotionPack_ = other.boughtPromotionPack_.Clone();
      hasBattlePass_ = other.hasBattlePass_;
      hasPurchaseDiamond_ = other.hasPurchaseDiamond_;
      lastBuyFreeDiamondPackTime_ = other.lastBuyFreeDiamondPackTime_;
      lastBuyFreeGoldPackTime_ = other.lastBuyFreeGoldPackTime_;
      lastBuyFreeWPCoinPackTime_ = other.lastBuyFreeWPCoinPackTime_;
      lastFreeStuffItems_ = other.lastFreeStuffItems_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopData Clone() {
      return new ShopData(this);
    }

    /// <summary>Field number for the "lastReceiveFreeAdsRareChestTime" field.</summary>
    public const int LastReceiveFreeAdsRareChestTimeFieldNumber = 1;
    private long lastReceiveFreeAdsRareChestTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastReceiveFreeAdsRareChestTime {
      get { return lastReceiveFreeAdsRareChestTime_; }
      set {
        lastReceiveFreeAdsRareChestTime_ = value;
      }
    }

    /// <summary>Field number for the "lastReceiveFreeAdsLegendaryChestTime" field.</summary>
    public const int LastReceiveFreeAdsLegendaryChestTimeFieldNumber = 2;
    private long lastReceiveFreeAdsLegendaryChestTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastReceiveFreeAdsLegendaryChestTime {
      get { return lastReceiveFreeAdsLegendaryChestTime_; }
      set {
        lastReceiveFreeAdsLegendaryChestTime_ = value;
      }
    }

    /// <summary>Field number for the "stackFreeAdsRareChestTime" field.</summary>
    public const int StackFreeAdsRareChestTimeFieldNumber = 3;
    private float stackFreeAdsRareChestTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StackFreeAdsRareChestTime {
      get { return stackFreeAdsRareChestTime_; }
      set {
        stackFreeAdsRareChestTime_ = value;
      }
    }

    /// <summary>Field number for the "stackFreeAdsLegendaryChestTime" field.</summary>
    public const int StackFreeAdsLegendaryChestTimeFieldNumber = 4;
    private float stackFreeAdsLegendaryChestTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StackFreeAdsLegendaryChestTime {
      get { return stackFreeAdsLegendaryChestTime_; }
      set {
        stackFreeAdsLegendaryChestTime_ = value;
      }
    }

    /// <summary>Field number for the "stackChestEquipRank" field.</summary>
    public const int StackChestEquipRankFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_stackChestEquipRank_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> stackChestEquipRank_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StackChestEquipRank {
      get { return stackChestEquipRank_; }
    }

    /// <summary>Field number for the "lastDayResetFreeStuff" field.</summary>
    public const int LastDayResetFreeStuffFieldNumber = 6;
    private long lastDayResetFreeStuff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastDayResetFreeStuff {
      get { return lastDayResetFreeStuff_; }
      set {
        lastDayResetFreeStuff_ = value;
      }
    }

    /// <summary>Field number for the "currentIndexFreeStuff" field.</summary>
    public const int CurrentIndexFreeStuffFieldNumber = 7;
    private long currentIndexFreeStuff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrentIndexFreeStuff {
      get { return currentIndexFreeStuff_; }
      set {
        currentIndexFreeStuff_ = value;
      }
    }

    /// <summary>Field number for the "hasPurchaseIAP" field.</summary>
    public const int HasPurchaseIAPFieldNumber = 8;
    private bool hasPurchaseIAP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPurchaseIAP {
      get { return hasPurchaseIAP_; }
      set {
        hasPurchaseIAP_ = value;
      }
    }

    /// <summary>Field number for the "boughtPromotionPack" field.</summary>
    public const int BoughtPromotionPackFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_boughtPromotionPack_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> boughtPromotionPack_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> BoughtPromotionPack {
      get { return boughtPromotionPack_; }
    }

    /// <summary>Field number for the "hasBattlePass" field.</summary>
    public const int HasBattlePassFieldNumber = 10;
    private bool hasBattlePass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBattlePass {
      get { return hasBattlePass_; }
      set {
        hasBattlePass_ = value;
      }
    }

    /// <summary>Field number for the "hasPurchaseDiamond" field.</summary>
    public const int HasPurchaseDiamondFieldNumber = 11;
    private bool hasPurchaseDiamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPurchaseDiamond {
      get { return hasPurchaseDiamond_; }
      set {
        hasPurchaseDiamond_ = value;
      }
    }

    /// <summary>Field number for the "lastBuyFreeDiamondPackTime" field.</summary>
    public const int LastBuyFreeDiamondPackTimeFieldNumber = 12;
    private long lastBuyFreeDiamondPackTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastBuyFreeDiamondPackTime {
      get { return lastBuyFreeDiamondPackTime_; }
      set {
        lastBuyFreeDiamondPackTime_ = value;
      }
    }

    /// <summary>Field number for the "lastBuyFreeGoldPackTime" field.</summary>
    public const int LastBuyFreeGoldPackTimeFieldNumber = 13;
    private long lastBuyFreeGoldPackTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastBuyFreeGoldPackTime {
      get { return lastBuyFreeGoldPackTime_; }
      set {
        lastBuyFreeGoldPackTime_ = value;
      }
    }

    /// <summary>Field number for the "lastBuyFreeWPCoinPackTime" field.</summary>
    public const int LastBuyFreeWPCoinPackTimeFieldNumber = 14;
    private long lastBuyFreeWPCoinPackTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastBuyFreeWPCoinPackTime {
      get { return lastBuyFreeWPCoinPackTime_; }
      set {
        lastBuyFreeWPCoinPackTime_ = value;
      }
    }

    /// <summary>Field number for the "lastFreeStuffItems" field.</summary>
    public const int LastFreeStuffItemsFieldNumber = 15;
    private static readonly pb::FieldCodec<string> _repeated_lastFreeStuffItems_codec
        = pb::FieldCodec.ForString(122);
    private readonly pbc::RepeatedField<string> lastFreeStuffItems_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> LastFreeStuffItems {
      get { return lastFreeStuffItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastReceiveFreeAdsRareChestTime != other.LastReceiveFreeAdsRareChestTime) return false;
      if (LastReceiveFreeAdsLegendaryChestTime != other.LastReceiveFreeAdsLegendaryChestTime) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StackFreeAdsRareChestTime, other.StackFreeAdsRareChestTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StackFreeAdsLegendaryChestTime, other.StackFreeAdsLegendaryChestTime)) return false;
      if(!stackChestEquipRank_.Equals(other.stackChestEquipRank_)) return false;
      if (LastDayResetFreeStuff != other.LastDayResetFreeStuff) return false;
      if (CurrentIndexFreeStuff != other.CurrentIndexFreeStuff) return false;
      if (HasPurchaseIAP != other.HasPurchaseIAP) return false;
      if(!boughtPromotionPack_.Equals(other.boughtPromotionPack_)) return false;
      if (HasBattlePass != other.HasBattlePass) return false;
      if (HasPurchaseDiamond != other.HasPurchaseDiamond) return false;
      if (LastBuyFreeDiamondPackTime != other.LastBuyFreeDiamondPackTime) return false;
      if (LastBuyFreeGoldPackTime != other.LastBuyFreeGoldPackTime) return false;
      if (LastBuyFreeWPCoinPackTime != other.LastBuyFreeWPCoinPackTime) return false;
      if(!lastFreeStuffItems_.Equals(other.lastFreeStuffItems_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastReceiveFreeAdsRareChestTime != 0L) hash ^= LastReceiveFreeAdsRareChestTime.GetHashCode();
      if (LastReceiveFreeAdsLegendaryChestTime != 0L) hash ^= LastReceiveFreeAdsLegendaryChestTime.GetHashCode();
      if (StackFreeAdsRareChestTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StackFreeAdsRareChestTime);
      if (StackFreeAdsLegendaryChestTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StackFreeAdsLegendaryChestTime);
      hash ^= stackChestEquipRank_.GetHashCode();
      if (LastDayResetFreeStuff != 0L) hash ^= LastDayResetFreeStuff.GetHashCode();
      if (CurrentIndexFreeStuff != 0L) hash ^= CurrentIndexFreeStuff.GetHashCode();
      if (HasPurchaseIAP != false) hash ^= HasPurchaseIAP.GetHashCode();
      hash ^= boughtPromotionPack_.GetHashCode();
      if (HasBattlePass != false) hash ^= HasBattlePass.GetHashCode();
      if (HasPurchaseDiamond != false) hash ^= HasPurchaseDiamond.GetHashCode();
      if (LastBuyFreeDiamondPackTime != 0L) hash ^= LastBuyFreeDiamondPackTime.GetHashCode();
      if (LastBuyFreeGoldPackTime != 0L) hash ^= LastBuyFreeGoldPackTime.GetHashCode();
      if (LastBuyFreeWPCoinPackTime != 0L) hash ^= LastBuyFreeWPCoinPackTime.GetHashCode();
      hash ^= lastFreeStuffItems_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastReceiveFreeAdsRareChestTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LastReceiveFreeAdsRareChestTime);
      }
      if (LastReceiveFreeAdsLegendaryChestTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastReceiveFreeAdsLegendaryChestTime);
      }
      if (StackFreeAdsRareChestTime != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(StackFreeAdsRareChestTime);
      }
      if (StackFreeAdsLegendaryChestTime != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(StackFreeAdsLegendaryChestTime);
      }
      stackChestEquipRank_.WriteTo(output, _repeated_stackChestEquipRank_codec);
      if (LastDayResetFreeStuff != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(LastDayResetFreeStuff);
      }
      if (CurrentIndexFreeStuff != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(CurrentIndexFreeStuff);
      }
      if (HasPurchaseIAP != false) {
        output.WriteRawTag(64);
        output.WriteBool(HasPurchaseIAP);
      }
      boughtPromotionPack_.WriteTo(output, _repeated_boughtPromotionPack_codec);
      if (HasBattlePass != false) {
        output.WriteRawTag(80);
        output.WriteBool(HasBattlePass);
      }
      if (HasPurchaseDiamond != false) {
        output.WriteRawTag(88);
        output.WriteBool(HasPurchaseDiamond);
      }
      if (LastBuyFreeDiamondPackTime != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(LastBuyFreeDiamondPackTime);
      }
      if (LastBuyFreeGoldPackTime != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(LastBuyFreeGoldPackTime);
      }
      if (LastBuyFreeWPCoinPackTime != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(LastBuyFreeWPCoinPackTime);
      }
      lastFreeStuffItems_.WriteTo(output, _repeated_lastFreeStuffItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastReceiveFreeAdsRareChestTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastReceiveFreeAdsRareChestTime);
      }
      if (LastReceiveFreeAdsLegendaryChestTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastReceiveFreeAdsLegendaryChestTime);
      }
      if (StackFreeAdsRareChestTime != 0F) {
        size += 1 + 4;
      }
      if (StackFreeAdsLegendaryChestTime != 0F) {
        size += 1 + 4;
      }
      size += stackChestEquipRank_.CalculateSize(_repeated_stackChestEquipRank_codec);
      if (LastDayResetFreeStuff != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastDayResetFreeStuff);
      }
      if (CurrentIndexFreeStuff != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentIndexFreeStuff);
      }
      if (HasPurchaseIAP != false) {
        size += 1 + 1;
      }
      size += boughtPromotionPack_.CalculateSize(_repeated_boughtPromotionPack_codec);
      if (HasBattlePass != false) {
        size += 1 + 1;
      }
      if (HasPurchaseDiamond != false) {
        size += 1 + 1;
      }
      if (LastBuyFreeDiamondPackTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastBuyFreeDiamondPackTime);
      }
      if (LastBuyFreeGoldPackTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastBuyFreeGoldPackTime);
      }
      if (LastBuyFreeWPCoinPackTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastBuyFreeWPCoinPackTime);
      }
      size += lastFreeStuffItems_.CalculateSize(_repeated_lastFreeStuffItems_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopData other) {
      if (other == null) {
        return;
      }
      if (other.LastReceiveFreeAdsRareChestTime != 0L) {
        LastReceiveFreeAdsRareChestTime = other.LastReceiveFreeAdsRareChestTime;
      }
      if (other.LastReceiveFreeAdsLegendaryChestTime != 0L) {
        LastReceiveFreeAdsLegendaryChestTime = other.LastReceiveFreeAdsLegendaryChestTime;
      }
      if (other.StackFreeAdsRareChestTime != 0F) {
        StackFreeAdsRareChestTime = other.StackFreeAdsRareChestTime;
      }
      if (other.StackFreeAdsLegendaryChestTime != 0F) {
        StackFreeAdsLegendaryChestTime = other.StackFreeAdsLegendaryChestTime;
      }
      stackChestEquipRank_.Add(other.stackChestEquipRank_);
      if (other.LastDayResetFreeStuff != 0L) {
        LastDayResetFreeStuff = other.LastDayResetFreeStuff;
      }
      if (other.CurrentIndexFreeStuff != 0L) {
        CurrentIndexFreeStuff = other.CurrentIndexFreeStuff;
      }
      if (other.HasPurchaseIAP != false) {
        HasPurchaseIAP = other.HasPurchaseIAP;
      }
      boughtPromotionPack_.Add(other.boughtPromotionPack_);
      if (other.HasBattlePass != false) {
        HasBattlePass = other.HasBattlePass;
      }
      if (other.HasPurchaseDiamond != false) {
        HasPurchaseDiamond = other.HasPurchaseDiamond;
      }
      if (other.LastBuyFreeDiamondPackTime != 0L) {
        LastBuyFreeDiamondPackTime = other.LastBuyFreeDiamondPackTime;
      }
      if (other.LastBuyFreeGoldPackTime != 0L) {
        LastBuyFreeGoldPackTime = other.LastBuyFreeGoldPackTime;
      }
      if (other.LastBuyFreeWPCoinPackTime != 0L) {
        LastBuyFreeWPCoinPackTime = other.LastBuyFreeWPCoinPackTime;
      }
      lastFreeStuffItems_.Add(other.lastFreeStuffItems_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LastReceiveFreeAdsRareChestTime = input.ReadInt64();
            break;
          }
          case 16: {
            LastReceiveFreeAdsLegendaryChestTime = input.ReadInt64();
            break;
          }
          case 29: {
            StackFreeAdsRareChestTime = input.ReadFloat();
            break;
          }
          case 37: {
            StackFreeAdsLegendaryChestTime = input.ReadFloat();
            break;
          }
          case 42:
          case 40: {
            stackChestEquipRank_.AddEntriesFrom(input, _repeated_stackChestEquipRank_codec);
            break;
          }
          case 48: {
            LastDayResetFreeStuff = input.ReadInt64();
            break;
          }
          case 56: {
            CurrentIndexFreeStuff = input.ReadInt64();
            break;
          }
          case 64: {
            HasPurchaseIAP = input.ReadBool();
            break;
          }
          case 74: {
            boughtPromotionPack_.AddEntriesFrom(input, _repeated_boughtPromotionPack_codec);
            break;
          }
          case 80: {
            HasBattlePass = input.ReadBool();
            break;
          }
          case 88: {
            HasPurchaseDiamond = input.ReadBool();
            break;
          }
          case 96: {
            LastBuyFreeDiamondPackTime = input.ReadInt64();
            break;
          }
          case 104: {
            LastBuyFreeGoldPackTime = input.ReadInt64();
            break;
          }
          case 112: {
            LastBuyFreeWPCoinPackTime = input.ReadInt64();
            break;
          }
          case 122: {
            lastFreeStuffItems_.AddEntriesFrom(input, _repeated_lastFreeStuffItems_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DayTrackingValue : pb::IMessage<DayTrackingValue> {
    private static readonly pb::MessageParser<DayTrackingValue> _parser = new pb::MessageParser<DayTrackingValue>(() => new DayTrackingValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DayTrackingValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DayTrackingValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DayTrackingValue(DayTrackingValue other) : this() {
      todayReviveAds_ = other.todayReviveAds_;
      todayReviveDiamond_ = other.todayReviveDiamond_;
      todayEarnAddonAirDrop_ = other.todayEarnAddonAirDrop_;
      todayDoubleCompleteLevelReward_ = other.todayDoubleCompleteLevelReward_;
      isPassedFirstTimeShowInterstitial_ = other.isPassedFirstTimeShowInterstitial_;
      isDoneRating_ = other.isDoneRating_;
      lastCountShowRating_ = other.lastCountShowRating_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DayTrackingValue Clone() {
      return new DayTrackingValue(this);
    }

    /// <summary>Field number for the "TodayReviveAds" field.</summary>
    public const int TodayReviveAdsFieldNumber = 1;
    private int todayReviveAds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TodayReviveAds {
      get { return todayReviveAds_; }
      set {
        todayReviveAds_ = value;
      }
    }

    /// <summary>Field number for the "TodayReviveDiamond" field.</summary>
    public const int TodayReviveDiamondFieldNumber = 2;
    private int todayReviveDiamond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TodayReviveDiamond {
      get { return todayReviveDiamond_; }
      set {
        todayReviveDiamond_ = value;
      }
    }

    /// <summary>Field number for the "TodayEarnAddonAirDrop" field.</summary>
    public const int TodayEarnAddonAirDropFieldNumber = 3;
    private int todayEarnAddonAirDrop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TodayEarnAddonAirDrop {
      get { return todayEarnAddonAirDrop_; }
      set {
        todayEarnAddonAirDrop_ = value;
      }
    }

    /// <summary>Field number for the "TodayDoubleCompleteLevelReward" field.</summary>
    public const int TodayDoubleCompleteLevelRewardFieldNumber = 4;
    private int todayDoubleCompleteLevelReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TodayDoubleCompleteLevelReward {
      get { return todayDoubleCompleteLevelReward_; }
      set {
        todayDoubleCompleteLevelReward_ = value;
      }
    }

    /// <summary>Field number for the "IsPassedFirstTimeShowInterstitial" field.</summary>
    public const int IsPassedFirstTimeShowInterstitialFieldNumber = 5;
    private bool isPassedFirstTimeShowInterstitial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPassedFirstTimeShowInterstitial {
      get { return isPassedFirstTimeShowInterstitial_; }
      set {
        isPassedFirstTimeShowInterstitial_ = value;
      }
    }

    /// <summary>Field number for the "IsDoneRating" field.</summary>
    public const int IsDoneRatingFieldNumber = 6;
    private bool isDoneRating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDoneRating {
      get { return isDoneRating_; }
      set {
        isDoneRating_ = value;
      }
    }

    /// <summary>Field number for the "LastCountShowRating" field.</summary>
    public const int LastCountShowRatingFieldNumber = 7;
    private int lastCountShowRating_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastCountShowRating {
      get { return lastCountShowRating_; }
      set {
        lastCountShowRating_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DayTrackingValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DayTrackingValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TodayReviveAds != other.TodayReviveAds) return false;
      if (TodayReviveDiamond != other.TodayReviveDiamond) return false;
      if (TodayEarnAddonAirDrop != other.TodayEarnAddonAirDrop) return false;
      if (TodayDoubleCompleteLevelReward != other.TodayDoubleCompleteLevelReward) return false;
      if (IsPassedFirstTimeShowInterstitial != other.IsPassedFirstTimeShowInterstitial) return false;
      if (IsDoneRating != other.IsDoneRating) return false;
      if (LastCountShowRating != other.LastCountShowRating) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TodayReviveAds != 0) hash ^= TodayReviveAds.GetHashCode();
      if (TodayReviveDiamond != 0) hash ^= TodayReviveDiamond.GetHashCode();
      if (TodayEarnAddonAirDrop != 0) hash ^= TodayEarnAddonAirDrop.GetHashCode();
      if (TodayDoubleCompleteLevelReward != 0) hash ^= TodayDoubleCompleteLevelReward.GetHashCode();
      if (IsPassedFirstTimeShowInterstitial != false) hash ^= IsPassedFirstTimeShowInterstitial.GetHashCode();
      if (IsDoneRating != false) hash ^= IsDoneRating.GetHashCode();
      if (LastCountShowRating != 0) hash ^= LastCountShowRating.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TodayReviveAds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TodayReviveAds);
      }
      if (TodayReviveDiamond != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TodayReviveDiamond);
      }
      if (TodayEarnAddonAirDrop != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TodayEarnAddonAirDrop);
      }
      if (TodayDoubleCompleteLevelReward != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TodayDoubleCompleteLevelReward);
      }
      if (IsPassedFirstTimeShowInterstitial != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsPassedFirstTimeShowInterstitial);
      }
      if (IsDoneRating != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsDoneRating);
      }
      if (LastCountShowRating != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LastCountShowRating);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TodayReviveAds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TodayReviveAds);
      }
      if (TodayReviveDiamond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TodayReviveDiamond);
      }
      if (TodayEarnAddonAirDrop != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TodayEarnAddonAirDrop);
      }
      if (TodayDoubleCompleteLevelReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TodayDoubleCompleteLevelReward);
      }
      if (IsPassedFirstTimeShowInterstitial != false) {
        size += 1 + 1;
      }
      if (IsDoneRating != false) {
        size += 1 + 1;
      }
      if (LastCountShowRating != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastCountShowRating);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DayTrackingValue other) {
      if (other == null) {
        return;
      }
      if (other.TodayReviveAds != 0) {
        TodayReviveAds = other.TodayReviveAds;
      }
      if (other.TodayReviveDiamond != 0) {
        TodayReviveDiamond = other.TodayReviveDiamond;
      }
      if (other.TodayEarnAddonAirDrop != 0) {
        TodayEarnAddonAirDrop = other.TodayEarnAddonAirDrop;
      }
      if (other.TodayDoubleCompleteLevelReward != 0) {
        TodayDoubleCompleteLevelReward = other.TodayDoubleCompleteLevelReward;
      }
      if (other.IsPassedFirstTimeShowInterstitial != false) {
        IsPassedFirstTimeShowInterstitial = other.IsPassedFirstTimeShowInterstitial;
      }
      if (other.IsDoneRating != false) {
        IsDoneRating = other.IsDoneRating;
      }
      if (other.LastCountShowRating != 0) {
        LastCountShowRating = other.LastCountShowRating;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TodayReviveAds = input.ReadInt32();
            break;
          }
          case 16: {
            TodayReviveDiamond = input.ReadInt32();
            break;
          }
          case 24: {
            TodayEarnAddonAirDrop = input.ReadInt32();
            break;
          }
          case 32: {
            TodayDoubleCompleteLevelReward = input.ReadInt32();
            break;
          }
          case 40: {
            IsPassedFirstTimeShowInterstitial = input.ReadBool();
            break;
          }
          case 48: {
            IsDoneRating = input.ReadBool();
            break;
          }
          case 56: {
            LastCountShowRating = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LocationPackSave : pb::IMessage<LocationPackSave> {
    private static readonly pb::MessageParser<LocationPackSave> _parser = new pb::MessageParser<LocationPackSave>(() => new LocationPackSave());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocationPackSave> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationPackSave() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationPackSave(LocationPackSave other) : this() {
      boughPack_ = other.boughPack_.Clone();
      showedLocation_ = other.showedLocation_.Clone();
      lastShowLevel_ = other.lastShowLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocationPackSave Clone() {
      return new LocationPackSave(this);
    }

    /// <summary>Field number for the "boughPack" field.</summary>
    public const int BoughPackFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_boughPack_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> boughPack_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> BoughPack {
      get { return boughPack_; }
    }

    /// <summary>Field number for the "showedLocation" field.</summary>
    public const int ShowedLocationFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_showedLocation_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> showedLocation_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ShowedLocation {
      get { return showedLocation_; }
    }

    /// <summary>Field number for the "lastShowLevel" field.</summary>
    public const int LastShowLevelFieldNumber = 3;
    private int lastShowLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastShowLevel {
      get { return lastShowLevel_; }
      set {
        lastShowLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocationPackSave);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocationPackSave other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!boughPack_.Equals(other.boughPack_)) return false;
      if(!showedLocation_.Equals(other.showedLocation_)) return false;
      if (LastShowLevel != other.LastShowLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= boughPack_.GetHashCode();
      hash ^= showedLocation_.GetHashCode();
      if (LastShowLevel != 0) hash ^= LastShowLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      boughPack_.WriteTo(output, _repeated_boughPack_codec);
      showedLocation_.WriteTo(output, _repeated_showedLocation_codec);
      if (LastShowLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LastShowLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += boughPack_.CalculateSize(_repeated_boughPack_codec);
      size += showedLocation_.CalculateSize(_repeated_showedLocation_codec);
      if (LastShowLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastShowLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocationPackSave other) {
      if (other == null) {
        return;
      }
      boughPack_.Add(other.boughPack_);
      showedLocation_.Add(other.showedLocation_);
      if (other.LastShowLevel != 0) {
        LastShowLevel = other.LastShowLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            boughPack_.AddEntriesFrom(input, _repeated_boughPack_codec);
            break;
          }
          case 18: {
            showedLocation_.AddEntriesFrom(input, _repeated_showedLocation_codec);
            break;
          }
          case 24: {
            LastShowLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SettingData : pb::IMessage<SettingData> {
    private static readonly pb::MessageParser<SettingData> _parser = new pb::MessageParser<SettingData>(() => new SettingData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SettingData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingData(SettingData other) : this() {
      isBgmOn_ = other.isBgmOn_;
      isSfxOn_ = other.isSfxOn_;
      language_ = other.language_;
      isRareChestNotificationOn_ = other.isRareChestNotificationOn_;
      isLegendaryChestNotificationOn_ = other.isLegendaryChestNotificationOn_;
      isFreeStuffNotificationOn_ = other.isFreeStuffNotificationOn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettingData Clone() {
      return new SettingData(this);
    }

    /// <summary>Field number for the "isBgmOn" field.</summary>
    public const int IsBgmOnFieldNumber = 1;
    private bool isBgmOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBgmOn {
      get { return isBgmOn_; }
      set {
        isBgmOn_ = value;
      }
    }

    /// <summary>Field number for the "isSfxOn" field.</summary>
    public const int IsSfxOnFieldNumber = 2;
    private bool isSfxOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSfxOn {
      get { return isSfxOn_; }
      set {
        isSfxOn_ = value;
      }
    }

    /// <summary>Field number for the "language" field.</summary>
    public const int LanguageFieldNumber = 3;
    private string language_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Language {
      get { return language_; }
      set {
        language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isRareChestNotificationOn" field.</summary>
    public const int IsRareChestNotificationOnFieldNumber = 4;
    private bool isRareChestNotificationOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRareChestNotificationOn {
      get { return isRareChestNotificationOn_; }
      set {
        isRareChestNotificationOn_ = value;
      }
    }

    /// <summary>Field number for the "isLegendaryChestNotificationOn" field.</summary>
    public const int IsLegendaryChestNotificationOnFieldNumber = 5;
    private bool isLegendaryChestNotificationOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLegendaryChestNotificationOn {
      get { return isLegendaryChestNotificationOn_; }
      set {
        isLegendaryChestNotificationOn_ = value;
      }
    }

    /// <summary>Field number for the "isFreeStuffNotificationOn" field.</summary>
    public const int IsFreeStuffNotificationOnFieldNumber = 6;
    private bool isFreeStuffNotificationOn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFreeStuffNotificationOn {
      get { return isFreeStuffNotificationOn_; }
      set {
        isFreeStuffNotificationOn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SettingData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SettingData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsBgmOn != other.IsBgmOn) return false;
      if (IsSfxOn != other.IsSfxOn) return false;
      if (Language != other.Language) return false;
      if (IsRareChestNotificationOn != other.IsRareChestNotificationOn) return false;
      if (IsLegendaryChestNotificationOn != other.IsLegendaryChestNotificationOn) return false;
      if (IsFreeStuffNotificationOn != other.IsFreeStuffNotificationOn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsBgmOn != false) hash ^= IsBgmOn.GetHashCode();
      if (IsSfxOn != false) hash ^= IsSfxOn.GetHashCode();
      if (Language.Length != 0) hash ^= Language.GetHashCode();
      if (IsRareChestNotificationOn != false) hash ^= IsRareChestNotificationOn.GetHashCode();
      if (IsLegendaryChestNotificationOn != false) hash ^= IsLegendaryChestNotificationOn.GetHashCode();
      if (IsFreeStuffNotificationOn != false) hash ^= IsFreeStuffNotificationOn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsBgmOn != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsBgmOn);
      }
      if (IsSfxOn != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsSfxOn);
      }
      if (Language.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Language);
      }
      if (IsRareChestNotificationOn != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsRareChestNotificationOn);
      }
      if (IsLegendaryChestNotificationOn != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsLegendaryChestNotificationOn);
      }
      if (IsFreeStuffNotificationOn != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsFreeStuffNotificationOn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsBgmOn != false) {
        size += 1 + 1;
      }
      if (IsSfxOn != false) {
        size += 1 + 1;
      }
      if (Language.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
      }
      if (IsRareChestNotificationOn != false) {
        size += 1 + 1;
      }
      if (IsLegendaryChestNotificationOn != false) {
        size += 1 + 1;
      }
      if (IsFreeStuffNotificationOn != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SettingData other) {
      if (other == null) {
        return;
      }
      if (other.IsBgmOn != false) {
        IsBgmOn = other.IsBgmOn;
      }
      if (other.IsSfxOn != false) {
        IsSfxOn = other.IsSfxOn;
      }
      if (other.Language.Length != 0) {
        Language = other.Language;
      }
      if (other.IsRareChestNotificationOn != false) {
        IsRareChestNotificationOn = other.IsRareChestNotificationOn;
      }
      if (other.IsLegendaryChestNotificationOn != false) {
        IsLegendaryChestNotificationOn = other.IsLegendaryChestNotificationOn;
      }
      if (other.IsFreeStuffNotificationOn != false) {
        IsFreeStuffNotificationOn = other.IsFreeStuffNotificationOn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsBgmOn = input.ReadBool();
            break;
          }
          case 16: {
            IsSfxOn = input.ReadBool();
            break;
          }
          case 26: {
            Language = input.ReadString();
            break;
          }
          case 32: {
            IsRareChestNotificationOn = input.ReadBool();
            break;
          }
          case 40: {
            IsLegendaryChestNotificationOn = input.ReadBool();
            break;
          }
          case 48: {
            IsFreeStuffNotificationOn = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StarData : pb::IMessage<StarData> {
    private static readonly pb::MessageParser<StarData> _parser = new pb::MessageParser<StarData>(() => new StarData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StarData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StarData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StarData(StarData other) : this() {
      levelStars_ = other.levelStars_.Clone();
      claimedDefault_ = other.claimedDefault_.Clone();
      claimedBattlePass_ = other.claimedBattlePass_.Clone();
      lastTotalStar_ = other.lastTotalStar_;
      lastTotalStarInHUDHome_ = other.lastTotalStarInHUDHome_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StarData Clone() {
      return new StarData(this);
    }

    /// <summary>Field number for the "levelStars" field.</summary>
    public const int LevelStarsFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_levelStars_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> levelStars_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LevelStars {
      get { return levelStars_; }
    }

    /// <summary>Field number for the "claimedDefault" field.</summary>
    public const int ClaimedDefaultFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_claimedDefault_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> claimedDefault_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ClaimedDefault {
      get { return claimedDefault_; }
    }

    /// <summary>Field number for the "claimedBattlePass" field.</summary>
    public const int ClaimedBattlePassFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_claimedBattlePass_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> claimedBattlePass_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> ClaimedBattlePass {
      get { return claimedBattlePass_; }
    }

    /// <summary>Field number for the "lastTotalStar" field.</summary>
    public const int LastTotalStarFieldNumber = 4;
    private int lastTotalStar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastTotalStar {
      get { return lastTotalStar_; }
      set {
        lastTotalStar_ = value;
      }
    }

    /// <summary>Field number for the "lastTotalStarInHUDHome" field.</summary>
    public const int LastTotalStarInHUDHomeFieldNumber = 5;
    private int lastTotalStarInHUDHome_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastTotalStarInHUDHome {
      get { return lastTotalStarInHUDHome_; }
      set {
        lastTotalStarInHUDHome_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StarData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StarData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!levelStars_.Equals(other.levelStars_)) return false;
      if(!claimedDefault_.Equals(other.claimedDefault_)) return false;
      if(!claimedBattlePass_.Equals(other.claimedBattlePass_)) return false;
      if (LastTotalStar != other.LastTotalStar) return false;
      if (LastTotalStarInHUDHome != other.LastTotalStarInHUDHome) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= levelStars_.GetHashCode();
      hash ^= claimedDefault_.GetHashCode();
      hash ^= claimedBattlePass_.GetHashCode();
      if (LastTotalStar != 0) hash ^= LastTotalStar.GetHashCode();
      if (LastTotalStarInHUDHome != 0) hash ^= LastTotalStarInHUDHome.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      levelStars_.WriteTo(output, _repeated_levelStars_codec);
      claimedDefault_.WriteTo(output, _repeated_claimedDefault_codec);
      claimedBattlePass_.WriteTo(output, _repeated_claimedBattlePass_codec);
      if (LastTotalStar != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LastTotalStar);
      }
      if (LastTotalStarInHUDHome != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LastTotalStarInHUDHome);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += levelStars_.CalculateSize(_repeated_levelStars_codec);
      size += claimedDefault_.CalculateSize(_repeated_claimedDefault_codec);
      size += claimedBattlePass_.CalculateSize(_repeated_claimedBattlePass_codec);
      if (LastTotalStar != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTotalStar);
      }
      if (LastTotalStarInHUDHome != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastTotalStarInHUDHome);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StarData other) {
      if (other == null) {
        return;
      }
      levelStars_.Add(other.levelStars_);
      claimedDefault_.Add(other.claimedDefault_);
      claimedBattlePass_.Add(other.claimedBattlePass_);
      if (other.LastTotalStar != 0) {
        LastTotalStar = other.LastTotalStar;
      }
      if (other.LastTotalStarInHUDHome != 0) {
        LastTotalStarInHUDHome = other.LastTotalStarInHUDHome;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            levelStars_.AddEntriesFrom(input, _repeated_levelStars_codec);
            break;
          }
          case 18:
          case 16: {
            claimedDefault_.AddEntriesFrom(input, _repeated_claimedDefault_codec);
            break;
          }
          case 26:
          case 24: {
            claimedBattlePass_.AddEntriesFrom(input, _repeated_claimedBattlePass_codec);
            break;
          }
          case 32: {
            LastTotalStar = input.ReadInt32();
            break;
          }
          case 40: {
            LastTotalStarInHUDHome = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ManualHeroData : pb::IMessage<ManualHeroData> {
    private static readonly pb::MessageParser<ManualHeroData> _parser = new pb::MessageParser<ManualHeroData>(() => new ManualHeroData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ManualHeroData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManualHeroData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManualHeroData(ManualHeroData other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ManualHeroData Clone() {
      return new ManualHeroData(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ManualHeroData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ManualHeroData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ManualHeroData other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class MissionData : pb::IMessage<MissionData> {
    private static readonly pb::MessageParser<MissionData> _parser = new pb::MessageParser<MissionData>(() => new MissionData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissionData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionData(MissionData other) : this() {
      id_ = other.id_;
      currentStep_ = other.currentStep_;
      isComplete_ = other.isComplete_;
      isClaimed_ = other.isClaimed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionData Clone() {
      return new MissionData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currentStep" field.</summary>
    public const int CurrentStepFieldNumber = 2;
    private int currentStep_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentStep {
      get { return currentStep_; }
      set {
        currentStep_ = value;
      }
    }

    /// <summary>Field number for the "isComplete" field.</summary>
    public const int IsCompleteFieldNumber = 3;
    private bool isComplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsComplete {
      get { return isComplete_; }
      set {
        isComplete_ = value;
      }
    }

    /// <summary>Field number for the "isClaimed" field.</summary>
    public const int IsClaimedFieldNumber = 4;
    private bool isClaimed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsClaimed {
      get { return isClaimed_; }
      set {
        isClaimed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissionData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissionData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CurrentStep != other.CurrentStep) return false;
      if (IsComplete != other.IsComplete) return false;
      if (IsClaimed != other.IsClaimed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (CurrentStep != 0) hash ^= CurrentStep.GetHashCode();
      if (IsComplete != false) hash ^= IsComplete.GetHashCode();
      if (IsClaimed != false) hash ^= IsClaimed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (CurrentStep != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CurrentStep);
      }
      if (IsComplete != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsComplete);
      }
      if (IsClaimed != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsClaimed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (CurrentStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentStep);
      }
      if (IsComplete != false) {
        size += 1 + 1;
      }
      if (IsClaimed != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissionData other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.CurrentStep != 0) {
        CurrentStep = other.CurrentStep;
      }
      if (other.IsComplete != false) {
        IsComplete = other.IsComplete;
      }
      if (other.IsClaimed != false) {
        IsClaimed = other.IsClaimed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            CurrentStep = input.ReadInt32();
            break;
          }
          case 24: {
            IsComplete = input.ReadBool();
            break;
          }
          case 32: {
            IsClaimed = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MissionDurationData : pb::IMessage<MissionDurationData> {
    private static readonly pb::MessageParser<MissionDurationData> _parser = new pb::MessageParser<MissionDurationData>(() => new MissionDurationData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissionDurationData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionDurationData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionDurationData(MissionDurationData other) : this() {
      missionDatas_ = other.missionDatas_.Clone();
      duration_ = other.duration_;
      startDate_ = other.startDate_;
      isClaimed_ = other.isClaimed_;
      isComplete_ = other.isComplete_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionDurationData Clone() {
      return new MissionDurationData(this);
    }

    /// <summary>Field number for the "missionDatas" field.</summary>
    public const int MissionDatasFieldNumber = 1;
    private static readonly pb::FieldCodec<global::com.datld.data.MissionData> _repeated_missionDatas_codec
        = pb::FieldCodec.ForMessage(10, global::com.datld.data.MissionData.Parser);
    private readonly pbc::RepeatedField<global::com.datld.data.MissionData> missionDatas_ = new pbc::RepeatedField<global::com.datld.data.MissionData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::com.datld.data.MissionData> MissionDatas {
      get { return missionDatas_; }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "startDate" field.</summary>
    public const int StartDateFieldNumber = 3;
    private long startDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartDate {
      get { return startDate_; }
      set {
        startDate_ = value;
      }
    }

    /// <summary>Field number for the "isClaimed" field.</summary>
    public const int IsClaimedFieldNumber = 4;
    private bool isClaimed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsClaimed {
      get { return isClaimed_; }
      set {
        isClaimed_ = value;
      }
    }

    /// <summary>Field number for the "isComplete" field.</summary>
    public const int IsCompleteFieldNumber = 5;
    private bool isComplete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsComplete {
      get { return isComplete_; }
      set {
        isComplete_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissionDurationData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissionDurationData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!missionDatas_.Equals(other.missionDatas_)) return false;
      if (Duration != other.Duration) return false;
      if (StartDate != other.StartDate) return false;
      if (IsClaimed != other.IsClaimed) return false;
      if (IsComplete != other.IsComplete) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= missionDatas_.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (StartDate != 0L) hash ^= StartDate.GetHashCode();
      if (IsClaimed != false) hash ^= IsClaimed.GetHashCode();
      if (IsComplete != false) hash ^= IsComplete.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      missionDatas_.WriteTo(output, _repeated_missionDatas_codec);
      if (Duration != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Duration);
      }
      if (StartDate != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartDate);
      }
      if (IsClaimed != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsClaimed);
      }
      if (IsComplete != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsComplete);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += missionDatas_.CalculateSize(_repeated_missionDatas_codec);
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (StartDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartDate);
      }
      if (IsClaimed != false) {
        size += 1 + 1;
      }
      if (IsComplete != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissionDurationData other) {
      if (other == null) {
        return;
      }
      missionDatas_.Add(other.missionDatas_);
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.StartDate != 0L) {
        StartDate = other.StartDate;
      }
      if (other.IsClaimed != false) {
        IsClaimed = other.IsClaimed;
      }
      if (other.IsComplete != false) {
        IsComplete = other.IsComplete;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            missionDatas_.AddEntriesFrom(input, _repeated_missionDatas_codec);
            break;
          }
          case 16: {
            Duration = input.ReadInt32();
            break;
          }
          case 24: {
            StartDate = input.ReadInt64();
            break;
          }
          case 32: {
            IsClaimed = input.ReadBool();
            break;
          }
          case 40: {
            IsComplete = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MissionManagerData : pb::IMessage<MissionManagerData> {
    private static readonly pb::MessageParser<MissionManagerData> _parser = new pb::MessageParser<MissionManagerData>(() => new MissionManagerData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MissionManagerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionManagerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionManagerData(MissionManagerData other) : this() {
      daily_ = other.daily_ != null ? other.daily_.Clone() : null;
      weekly_ = other.weekly_ != null ? other.weekly_.Clone() : null;
      lastCheckLoginMission_ = other.lastCheckLoginMission_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MissionManagerData Clone() {
      return new MissionManagerData(this);
    }

    /// <summary>Field number for the "daily" field.</summary>
    public const int DailyFieldNumber = 1;
    private global::com.datld.data.MissionDurationData daily_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.MissionDurationData Daily {
      get { return daily_; }
      set {
        daily_ = value;
      }
    }

    /// <summary>Field number for the "weekly" field.</summary>
    public const int WeeklyFieldNumber = 2;
    private global::com.datld.data.MissionDurationData weekly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::com.datld.data.MissionDurationData Weekly {
      get { return weekly_; }
      set {
        weekly_ = value;
      }
    }

    /// <summary>Field number for the "lastCheckLoginMission" field.</summary>
    public const int LastCheckLoginMissionFieldNumber = 3;
    private int lastCheckLoginMission_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LastCheckLoginMission {
      get { return lastCheckLoginMission_; }
      set {
        lastCheckLoginMission_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MissionManagerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MissionManagerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Daily, other.Daily)) return false;
      if (!object.Equals(Weekly, other.Weekly)) return false;
      if (LastCheckLoginMission != other.LastCheckLoginMission) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (daily_ != null) hash ^= Daily.GetHashCode();
      if (weekly_ != null) hash ^= Weekly.GetHashCode();
      if (LastCheckLoginMission != 0) hash ^= LastCheckLoginMission.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (daily_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Daily);
      }
      if (weekly_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Weekly);
      }
      if (LastCheckLoginMission != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LastCheckLoginMission);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (daily_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Daily);
      }
      if (weekly_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Weekly);
      }
      if (LastCheckLoginMission != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastCheckLoginMission);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MissionManagerData other) {
      if (other == null) {
        return;
      }
      if (other.daily_ != null) {
        if (daily_ == null) {
          Daily = new global::com.datld.data.MissionDurationData();
        }
        Daily.MergeFrom(other.Daily);
      }
      if (other.weekly_ != null) {
        if (weekly_ == null) {
          Weekly = new global::com.datld.data.MissionDurationData();
        }
        Weekly.MergeFrom(other.Weekly);
      }
      if (other.LastCheckLoginMission != 0) {
        LastCheckLoginMission = other.LastCheckLoginMission;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (daily_ == null) {
              Daily = new global::com.datld.data.MissionDurationData();
            }
            input.ReadMessage(Daily);
            break;
          }
          case 18: {
            if (weekly_ == null) {
              Weekly = new global::com.datld.data.MissionDurationData();
            }
            input.ReadMessage(Weekly);
            break;
          }
          case 24: {
            LastCheckLoginMission = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReminderData : pb::IMessage<ReminderData> {
    private static readonly pb::MessageParser<ReminderData> _parser = new pb::MessageParser<ReminderData>(() => new ReminderData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReminderData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReminderData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReminderData(ReminderData other) : this() {
      newHeroOnHudEquip_ = other.newHeroOnHudEquip_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReminderData Clone() {
      return new ReminderData(this);
    }

    /// <summary>Field number for the "newHeroOnHudEquip" field.</summary>
    public const int NewHeroOnHudEquipFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_newHeroOnHudEquip_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> newHeroOnHudEquip_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> NewHeroOnHudEquip {
      get { return newHeroOnHudEquip_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReminderData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReminderData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!newHeroOnHudEquip_.Equals(other.newHeroOnHudEquip_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= newHeroOnHudEquip_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      newHeroOnHudEquip_.WriteTo(output, _repeated_newHeroOnHudEquip_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += newHeroOnHudEquip_.CalculateSize(_repeated_newHeroOnHudEquip_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReminderData other) {
      if (other == null) {
        return;
      }
      newHeroOnHudEquip_.Add(other.newHeroOnHudEquip_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            newHeroOnHudEquip_.AddEntriesFrom(input, _repeated_newHeroOnHudEquip_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AdsTracker : pb::IMessage<AdsTracker> {
    private static readonly pb::MessageParser<AdsTracker> _parser = new pb::MessageParser<AdsTracker>(() => new AdsTracker());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdsTracker> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::com.datld.data.UserDataReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdsTracker() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdsTracker(AdsTracker other) : this() {
      lastTimeWatchedRewardAds_ = other.lastTimeWatchedRewardAds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdsTracker Clone() {
      return new AdsTracker(this);
    }

    /// <summary>Field number for the "lastTimeWatchedRewardAds" field.</summary>
    public const int LastTimeWatchedRewardAdsFieldNumber = 1;
    private long lastTimeWatchedRewardAds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastTimeWatchedRewardAds {
      get { return lastTimeWatchedRewardAds_; }
      set {
        lastTimeWatchedRewardAds_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdsTracker);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdsTracker other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastTimeWatchedRewardAds != other.LastTimeWatchedRewardAds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastTimeWatchedRewardAds != 0L) hash ^= LastTimeWatchedRewardAds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastTimeWatchedRewardAds != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LastTimeWatchedRewardAds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastTimeWatchedRewardAds != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastTimeWatchedRewardAds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdsTracker other) {
      if (other == null) {
        return;
      }
      if (other.LastTimeWatchedRewardAds != 0L) {
        LastTimeWatchedRewardAds = other.LastTimeWatchedRewardAds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LastTimeWatchedRewardAds = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
