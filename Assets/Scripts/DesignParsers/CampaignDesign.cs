// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var levelWaveDesign = LevelWaveDesign.FromJson(jsonString);

namespace QuickType.LevelWave
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class CampaignLevelDesign
    {
        [JsonProperty("CampaignLevelDesign", Required = Required.Always)]
        public List<LevelElementDesign> LevelArr { get; set; }
    }

    //alias
    public partial class IdleLevelDesign
    {
        [JsonProperty("IdleLevelDesign", Required = Required.Always)]
        public List<LevelElementDesign> LevelArr { get; set; }
    }


    public partial class LevelElementDesign
    {
        [JsonProperty("Level", Required = Required.Always)]
        public int Level { get; set; }

        [JsonProperty("LocationID", Required = Required.Always)]
        public string LocationId { get; set; }

        [JsonProperty("DPSToWin", Required = Required.Always)]
        public float DPSToWin { get; set; }

        [JsonProperty("TotalWave", Required = Required.Always)]
        public long TotalWave { get; set; }

        [JsonProperty("NextWaveDuration", Required = Required.Always)]
        public float NextWaveDuration { get; set; }

        [JsonProperty("ZombieHPMultiplier", Required = Required.Always)]
        public float ZombieHpMultiplier { get; set; }

        [JsonProperty("ZombieDmgMultiplier", Required = Required.Always)]
        public float ZombieDmgMultiplier { get; set; }

        [JsonProperty("WaveType", Required = Required.Always)]
        public WaveType WaveType { get; set; }

        [JsonProperty("WaveControl", Required = Required.Default)]
        public List<WaveControl> WaveControl { get; set; }
    }

    public partial class WaveControl
    {
        [JsonProperty("ZombieRatio", Required = Required.Always)]
        public string ZombieRatio { get; set; }

        [JsonProperty("NumZombie", Required = Required.Always)]
        public long NumZombie { get; set; }

        [JsonProperty("Loop", Required = Required.Always)]
        public long Loop { get; set; }

        [JsonProperty("WaveDispenser", Required = Required.Default)]
        public string WaveDispenser { get; set; }
    }


    public enum WaveType
    {
        Sequence,
        Zigzac
    };

    public partial class CampaignLevelDesign
    {
        public static CampaignLevelDesign FromJson(string json) =>
            JsonConvert.DeserializeObject<CampaignLevelDesign>(json, QuickType.LevelWave.Converter.Settings);
    }

    public partial class IdleLevelDesign
    {
        public static IdleLevelDesign FromJson(string json) =>
            JsonConvert.DeserializeObject<IdleLevelDesign>(json, QuickType.LevelWave.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this CampaignLevelDesign self) =>
            JsonConvert.SerializeObject(self, QuickType.LevelWave.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Default,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                WaveTypeConverter.Singleton,
                new IsoDateTimeConverter {DateTimeStyles = DateTimeStyles.AssumeUniversal}
            },
        };
    }

    internal class WaveTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(WaveType) || t == typeof(WaveType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "SEQUENCE":
                    return WaveType.Sequence;
                case "ZIGZAC":
                    return WaveType.Zigzac;
            }

            throw new Exception("Cannot unmarshal type WaveType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }

            var value = (WaveType)untypedValue;
            switch (value)
            {
                case WaveType.Sequence:
                    serializer.Serialize(writer, "SEQUENCE");
                    return;
                case WaveType.Zigzac:
                    serializer.Serialize(writer, "ZIGZAC");
                    return;
            }

            throw new Exception("Cannot marshal type WaveType");
        }

        public static readonly WaveTypeConverter Singleton = new WaveTypeConverter();
    }
}