// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var skipIdleLevelDesign = SkipIdleLevelDesign.FromJson(jsonString);

namespace QuickType.SkipLevel
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class SkipIdleLevelDesign
    {
        [JsonProperty("SkipIdleLevelDesign", Required = Required.Always)]
        public List<SkipIdleLevelDesignElement> SkipIdleLevelDesignSkipIdleLevelDesign { get; set; }
    }

    public partial class SkipIdleLevelDesignElement
    {
        [JsonProperty("Level", Required = Required.Always)]
        public long Level { get; set; }

        [JsonProperty("BaseAdsToken", Required = Required.Always)]
        public long BaseAdsToken { get; set; }

        [JsonProperty("StepAdsToken", Required = Required.Always)]
        public long StepAdsToken { get; set; }

        [JsonProperty("BaseDiamondToken", Required = Required.Always)]
        public long BaseDiamondToken { get; set; }

        [JsonProperty("StepDiamondToken", Required = Required.Always)]
        public long StepDiamondToken { get; set; }

        [JsonProperty("PriceDiamond", Required = Required.Always)]
        public long PriceDiamond { get; set; }
    }

    public partial class SkipIdleLevelDesign
    {
        public static SkipIdleLevelDesign FromJson(string json) => JsonConvert.DeserializeObject<SkipIdleLevelDesign>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this SkipIdleLevelDesign self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
