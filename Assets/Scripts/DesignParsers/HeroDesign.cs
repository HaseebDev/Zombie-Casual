// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var allHeroDesign = AllHeroDesign.FromJson(jsonString);

using Doozy.Engine.Utils.ColorModels;
using QuickType.SkillDesign;
using UnityEngine;

namespace QuickType.Hero
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class AllHeroDesign
    {
        [JsonProperty("HeroDesign", Required = Required.Always)]
        public List<HeroDesign> HeroDesign { get; set; }
    }

    public partial class HeroDesign
    {
        [JsonProperty("HeroID", Required = Required.Always)]
        public string HeroId { get; set; }

        [JsonProperty("Type", Required = Required.Always)]
        public TypeEnum Type { get; set; }

        [JsonProperty("Name", Required = Required.Always)]
        public string Name { get; set; }

        [JsonProperty("DefaultWeapon", Required = Required.Always)]
        public string DefaultWeapon { get; set; }

        [JsonProperty("Rarity", Required = Required.Always)]
        public long Rarity { get; set; }

        [JsonProperty("DescriptionID", Required = Required.Always)]
        public string DescriptionId { get; set; }

        [JsonProperty("StartLevel", Required = Required.Always)]
        public long StartLevel { get; set; }

        [JsonProperty("MaxLevel", Required = Required.Always)]
        public long MaxLevel { get; set; }

        [JsonProperty("Dmg", Required = Required.Always)]
        public float Dmg { get; set; }

        [JsonProperty("DmgUprade", Required = Required.Always)]
        public float DmgUprade { get; set; }

        [JsonProperty("TimeSwitchTarget", Required = Required.Always)]
        public float TimeSwitchTarget { get; set; }

        [JsonProperty("FireRate", Required = Required.Always)]
        public float FireRate { get; set; }

        [JsonProperty("FireRateUprade", Required = Required.Always)]
        public float FireRateUprade { get; set; }

        [JsonProperty("HeadshotPercent", Required = Required.Always)]
        public float HeadshotPercent { get; set; }

        [JsonProperty("HeadshotPercentUpgrade", Required = Required.Always)]
        public float HeadshotPercentUpgrade { get; set; }

        [JsonProperty("CritPercent", Required = Required.Always)]
        public float CritPercent { get; set; }

        [JsonProperty("CritPercentUpgrade", Required = Required.Always)]
        public float CritPercentUpgrade { get; set; }

        [JsonProperty("Range", Required = Required.Always)]
        public float Range { get; set; }

        [JsonProperty("RangeUprade", Required = Required.Always)]
        public float RangeUprade { get; set; }

        [JsonProperty("HP", Required = Required.Always)]
        public long Hp { get; set; }

        [JsonProperty("HPUprade", Required = Required.Always)]
        public float HpUprade { get; set; }

        [JsonProperty("Armour", Required = Required.Always)]
        public float Armour { get; set; }

        [JsonProperty("AmourUpgrade", Required = Required.Always)]
        public float AmourUpgrade { get; set; }

        [JsonProperty("Skill01", Required = Required.Always)]
        public string Skill01 { get; set; }

        [JsonProperty("Skill02", Required = Required.Always)]
        public string Skill02 { get; set; }

        [JsonProperty("Skill03", Required = Required.Always)]
        public string Skill03 { get; set; }

        [JsonProperty("PassiveSkill", Required = Required.Always)]
        public string PassiveSkill { get; set; }

        [JsonProperty("RarityDmgMultiply", Required = Required.Always)]
        public int RarityDmgMultiply { get; set; }

        [JsonProperty("PriceGold", Required = Required.Always)]
        public long PriceGold { get; set; }

        [JsonProperty("UpgradeCost", Required = Required.Always)]
        public float UpgradeCost { get; set; }

        [JsonProperty("UpgradeCostStep", Required = Required.Always)]
        public float UpgradeCostStep { get; set; }

        [JsonProperty("ShardRequire", Required = Required.Always)]
        public long ShardRequire { get; set; }
    }

    public partial class HeroDesign
    {
        public string GetLocalizeName()
        {
            return LocalizeController.GetText(Name);
        }

        // T1 - skill ID
        // T2 - unlock rank
        public List<Tuple<string, int>> GetNextLockedSkills()
        {
            var listAllWp = DesignManager.instance.DictHeroDesign[this.HeroId];
            List<Tuple<string, int>> result = new List<Tuple<string, int>>();
            List<string> addedSkill = new List<string>();

            int startIndex = listAllWp.FindIndex(x => x.Rarity == Rarity);
            foreach (var unlocked in GetAllSkills())
            {
                string finalString = unlocked.Split('/')[0];
                addedSkill.Add(finalString);
            }

            for (int i = startIndex + 1; i < listAllWp.Count; i++)
            {
                var allSkill = listAllWp[i].GetAllSkills();
                foreach (var skill in allSkill)
                {
                    string finalString = skill.Split('/')[0];

                    if (!addedSkill.Contains(finalString))
                    {
                        addedSkill.Add(finalString);
                        result.Add(new Tuple<string, int>(skill, (int)listAllWp[i].Rarity));
                    }
                }
            }

            return result;
        }

        public List<string> GetAllSkills()
        {
            string nill = "NILL";
            List<string> results = new List<string>();
            if (Skill01 != nill)
            {
                results.Add(Skill01);
            }

            if (Skill02 != nill)
            {
                results.Add(Skill02);
            }

            if (Skill03 != nill)
            {
                results.Add(Skill03);
            }

            if (PassiveSkill != nill)
            {
                results.Add(PassiveSkill);
            }

            return results;
        }
    }

    public enum TypeEnum
    {
        Assault,
        Engineer,
        Manual,
        Spy,
        Tower
    };

    public partial class AllHeroDesign
    {
        public static AllHeroDesign FromJson(string json) =>
            JsonConvert.DeserializeObject<AllHeroDesign>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AllHeroDesign self) =>
            JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter {DateTimeStyles = DateTimeStyles.AssumeUniversal}
            },
        };
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "ASSAULT":
                    return TypeEnum.Assault;
                case "ENGINEER":
                    return TypeEnum.Engineer;
                case "MANUAL":
                    return TypeEnum.Manual;
                case "SPY":
                    return TypeEnum.Spy;
                case "TOWER":
                    return TypeEnum.Tower;
            }

            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }

            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Assault:
                    serializer.Serialize(writer, "ASSAULT");
                    return;
                case TypeEnum.Engineer:
                    serializer.Serialize(writer, "ENGINEER");
                    return;
                case TypeEnum.Manual:
                    serializer.Serialize(writer, "MANUAL");
                    return;
                case TypeEnum.Spy:
                    serializer.Serialize(writer, "SPY");
                    return;
                case TypeEnum.Tower:
                    serializer.Serialize(writer, "TOWER");
                    return;
            }

            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}