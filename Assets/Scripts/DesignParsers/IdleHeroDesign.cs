// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var allIdleHeroDesign = AllIdleHeroDesign.FromJson(jsonString);

namespace QuickType.IdleHero
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class AllIdleHeroDesign
    {
        [JsonProperty("IdleHeroDesign", Required = Required.Always)]
        public List<IdleHeroDesign> IdleHeroDesign { get; set; }
    }

    public partial class IdleHeroDesign
    {
        [JsonProperty("HeroID", Required = Required.Always)]
        public string HeroId { get; set; }

        [JsonProperty("StartLevel", Required = Required.Always)]
        public long StartLevel { get; set; }

        [JsonProperty("MaxLevel", Required = Required.Always)]
        public long MaxLevel { get; set; }

        [JsonProperty("Dmg", Required = Required.Always)]
        public long Dmg { get; set; }

        [JsonProperty("DmgUprade", Required = Required.Always)]
        public long DmgUprade { get; set; }

        [JsonProperty("HP", Required = Required.Always)]
        public long Hp { get; set; }

        [JsonProperty("HPUprade", Required = Required.Always)]
        public long HpUprade { get; set; }

        [JsonProperty("UpgradeToken", Required = Required.Always)]
        public long UpgradeToken { get; set; }

        [JsonProperty("UpgradeTokenStep", Required = Required.Always)]
        public float UpgradeTokenStep { get; set; }
    }


    public partial class AllIdleHeroDesign
    {
        public static AllIdleHeroDesign FromJson(string json) => JsonConvert.DeserializeObject<AllIdleHeroDesign>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AllIdleHeroDesign self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

}
