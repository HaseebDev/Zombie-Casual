// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var idleDesign = IdleDesign.FromJson(jsonString);

namespace QuickType.IdleDesign
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class IdleDesign
    {
        [JsonProperty("Level", Required = Required.Always)]
        public long Level { get; set; }

        [JsonProperty("Wave", Required = Required.Always)]
        public long Wave { get; set; }

        [JsonProperty("MinZombie", Required = Required.Always)]
        public long MinZombie { get; set; }

        [JsonProperty("MaxZombie", Required = Required.Always)]
        public long MaxZombie { get; set; }

        [JsonProperty("ZombieRatio", Required = Required.Always)]
        public string ZombieRatio { get; set; }

        [JsonProperty("ZombieHPMultiplier", Required = Required.Always)]
        public double ZombieHpMultiplier { get; set; }
    }


    public partial class IdleDesign
    {
        public static Dictionary<string, List<IdleDesign>> FromJson(string json) => JsonConvert.DeserializeObject<Dictionary<string, List<IdleDesign>>>(json, QuickType.IdleDesign.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Dictionary<string, List<IdleDesign>> self) => JsonConvert.SerializeObject(self, QuickType.IdleDesign.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

}
