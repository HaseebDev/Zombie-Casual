// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var allWeaponDes = AllWeaponDes.FromJson(jsonString);

namespace QuickType.Weapon
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using com.datld.data;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using QuickType.Attribute;

    public partial class AllWeaponDes
    {
        [JsonProperty("WeaponDesign", Required = Required.Always)]
        public List<WeaponDesign> WeaponDesign { get; set; }
    }

    public partial class WeaponDesign
    {
        [JsonProperty("WeaponID", Required = Required.Always)]
        public string WeaponId { get; set; }

        [JsonProperty("Name", Required = Required.Always)]
        public string Name { get; set; }

        [JsonProperty("DescriptionID", Required = Required.Always)]
        public string DescriptionId { get; set; }

        [JsonProperty("EquipType", Required = Required.Always)]
        public short EquipType { get; set; }

        [JsonProperty("HandType", Required = Required.Always)]
        public WEAPON_TYPE HandType { get; set; }

        [JsonProperty("StartLevel", Required = Required.Always)]
        public long StartLevel { get; set; }

        [JsonProperty("MaxLevel", Required = Required.Always)]
        public long MaxLevel { get; set; }

        [JsonProperty("Rarity", Required = Required.Always)]
        public long Rarity { get; set; }

        [JsonProperty("FireRate", Required = Required.Always)]
        public float FireRate { get; set; }

        [JsonProperty("FireRateUpgrade", Required = Required.Always)]
        public float FireRateUpgrade { get; set; }

        [JsonProperty("PercentDmg", Required = Required.Always)]
        public float PercentDmg { get; set; }

        [JsonProperty("PercentDmgUpgrade", Required = Required.Always)]
        public float PercentDmgUpgrade { get; set; }

        [JsonProperty("HeadshotPercent", Required = Required.Always)]
        public float HeadshotPercent { get; set; }

        [JsonProperty("HeadshotPercentUpgrade", Required = Required.Always)]
        public float HeadshotPercentUpgrade { get; set; }

        [JsonProperty("CritPercent", Required = Required.Always)]
        public float CritPercent { get; set; }

        [JsonProperty("CritPercentUpgrade", Required = Required.Always)]
        public float CritPercentUpgrade { get; set; }

        [JsonProperty("Range", Required = Required.Always)]
        public float Range { get; set; }

        [JsonProperty("RangeUprade", Required = Required.Always)]
        public float RangeUprade { get; set; }

        [JsonProperty("HP", Required = Required.Always)]
        public float Hp { get; set; }

        [JsonProperty("HPUpgrade", Required = Required.Always)]
        public float HpUpgrade { get; set; }

        [JsonProperty("Armour", Required = Required.Always)]
        public float Armour { get; set; }

        [JsonProperty("ArmourUpgrade", Required = Required.Always)]
        public float ArmourUpgrade { get; set; }

        [JsonProperty("SellPrice", Required = Required.Always)]
        public float SellPrice { get; set; }

        [JsonProperty("PriceMultiplyLevel", Required = Required.Always)]
        public float PriceMultiplyLevel { get; set; }

        [JsonProperty("UpWeaponScroll", Required = Required.Always)]
        public long UpWeaponScroll { get; set; }

        [JsonProperty("UpWeaponStep", Required = Required.Always)]
        public long UpWeaponStep { get; set; }

        [JsonProperty("UpArmourScroll", Required = Required.Always)]
        public long UpArmourScroll { get; set; }

        [JsonProperty("UpArmourStep", Required = Required.Always)]
        public long UpArmourStep { get; set; }

        [JsonProperty("UpGold", Required = Required.Always)]
        public long UpGold { get; set; }

        [JsonProperty("UpGoldStep", Required = Required.Always)]
        public long UpGoldStep { get; set; }

        [JsonProperty("Icon", Required = Required.Always)]
        public string Icon { get; set; }

        [JsonProperty("Attribute1ID", Required = Required.Always)]
        public string Attribute1Id { get; set; }

        [JsonProperty("Attribute1Value", Required = Required.Always)]
        public float Attribute1Value { get; set; }

        [JsonProperty("Attribute2ID", Required = Required.Always)]
        public string Attribute2Id { get; set; }

        [JsonProperty("Attribute2Value", Required = Required.Always)]
        public float Attribute2Value { get; set; }

        [JsonProperty("Attribute3ID", Required = Required.Always)]
        public string Attribute3Id { get; set; }

        [JsonProperty("Attribute3Value", Required = Required.Always)]
        public float Attribute3Value { get; set; }

        [JsonProperty("Attribute4ID", Required = Required.Always)]
        public string Attribute4Id { get; set; }

        [JsonProperty("Attribute4Value", Required = Required.Always)]
        public float Attribute4Value { get; set; }

        [JsonProperty("Attribute5ID", Required = Required.Always)]
        public string Attribute5Id { get; set; }

        [JsonProperty("Attribute5Value", Required = Required.Always)]
        public float Attribute5Value { get; set; }
    }

    public partial class WeaponDesign
    {
        public string GetLocalizeName()
        {
            return LocalizeController.GetText(Name);
        }
    }


    public partial class AllWeaponDes
    {
        public static AllWeaponDes FromJson(string json) =>
            JsonConvert.DeserializeObject<AllWeaponDes>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AllWeaponDes self) =>
            JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                WeaponTypeEnumConverter.Singleton,
                new IsoDateTimeConverter {DateTimeStyles = DateTimeStyles.AssumeUniversal}
            },
        };
    }


    internal class WeaponTypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(WEAPON_TYPE) || t == typeof(WEAPON_TYPE?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            return value.ParseEnum<WEAPON_TYPE>(WEAPON_TYPE.NoneWeapon);

            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }

            var value = (WEAPON_TYPE)untypedValue;
            serializer.Serialize(writer, value.ToString());
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly WeaponTypeEnumConverter Singleton = new WeaponTypeEnumConverter();
    }

    public partial class WeaponDesign
    {
        public List<Tuple<string, float>> GetListAttributeDesigns()
        {
            List<Tuple<string, float>> result = new List<Tuple<string, float>>();

            if (FireRate != 0)
            {
                result.Add(new Tuple<string, float>(EffectType.PASSIVE_INCREASE_FIRERATE.ToString(), FireRate));
            }

            if (PercentDmg != 0)
            {
                result.Add(new Tuple<string, float>(EffectType.PASSIVE_INCREASE_PERCENT_DMG.ToString(), PercentDmg));
            }

            if (HeadshotPercent != 0)
            {
                result.Add(new Tuple<string, float>(EffectType.PASSIVE_INCREASE_HEADSHOT_PERCENT.ToString(),
                    HeadshotPercent));
            }

            if (CritPercent != 0)
            {
                result.Add(new Tuple<string, float>(EffectType.PASSIVE_INCREASE_CRIT.ToString(), HeadshotPercent));
            }

            if (Range != 0)
            {
                result.Add(new Tuple<string, float>(EffectType.PASSIVE_INCREASE_RANGE.ToString(), Range));
            }

            if (Hp != 0)
            {
                result.Add(new Tuple<string, float>(EffectType.PASSIVE_INCREASE_HP.ToString(), Hp));
            }

            if (Armour != 0)
            {
                result.Add(new Tuple<string, float>(EffectType.PASSIVE_INCREASE_ARMOUR.ToString(), Armour));
            }

            // Add special attributes
            // var specialAttributes = GetListSpecialAttributeEquip();
            // if (specialAttributes.Count > 0)
            // {
            //     foreach (var specialAttribute in specialAttributes)
            //     {
            //         result.Add(specialAttribute);
            //     }
            // }

            return result;
        }

        // T1 - attribute ID
        // T2 - attribute value
        // T3 - unlock rank
        public Tuple<string, float, int> GetNextLockedAttribute()
        {
            var listAllWp = DesignManager.instance.DictWeaponDesign[this.WeaponId];
            var lastRankWp = listAllWp[listAllWp.Count - 1];
            int startIndex = listAllWp.IndexOf(this);
            // Maxed
            if (startIndex == listAllWp.Count - 1)
                return null;

            List<Tuple<string, float, int>> result = new List<Tuple<string, float, int>>();

            var currentRankAttribute = GetListSpecialAttributeDesigns();
            var lastRankAttribute = lastRankWp.GetListSpecialAttributeDesigns();

            for (int i = startIndex + 1; i < listAllWp.Count; i++)
            {
                var compareRank = listAllWp[i];
                var compareAttribute = compareRank.GetListSpecialAttributeDesigns();
                if (currentRankAttribute.Count < compareAttribute.Count)
                {
                    int totalNew = currentRankAttribute.Count;
                    return new Tuple<string, float, int>(compareAttribute[totalNew].Item1,
                        lastRankAttribute[totalNew].Item2, (int)compareRank.Rarity);

                    // return new Tuple<string, float, int>(lastRankAttribute[nextIndex].Item1,
                    //     lastRankAttribute[nextIndex].Item2, nextIndex); 
                }

                // result.Add(new Tuple<string, float, int>(lastRankAttribute[i].Item1, lastRankAttribute[i].Item2, i));
            }


            return null;
        }

        public List<Tuple<string, float>> GetListSpecialAttributeDesigns()
        {
            string DEFAULT_NULL = DesignHelper.DEFAULT_NULL;
            WeaponDesign wpDesign = this;

            List<Tuple<string, float>> result = new List<Tuple<string, float>>();

            if (wpDesign.Attribute1Id != null && wpDesign.Attribute1Id != DEFAULT_NULL)
            {
                result.Add(new Tuple<string, float>(wpDesign.Attribute1Id, wpDesign.Attribute1Value));
            }

            if (wpDesign.Attribute2Id != null && wpDesign.Attribute2Id != DEFAULT_NULL)
            {
                result.Add(new Tuple<string, float>(wpDesign.Attribute2Id, wpDesign.Attribute2Value));
            }

            if (wpDesign.Attribute3Id != null && wpDesign.Attribute3Id != DEFAULT_NULL)
            {
                result.Add(new Tuple<string, float>(wpDesign.Attribute3Id, wpDesign.Attribute3Value));
            }

            if (wpDesign.Attribute4Id != null && wpDesign.Attribute4Id != DEFAULT_NULL)
            {
                result.Add(new Tuple<string, float>(wpDesign.Attribute4Id, wpDesign.Attribute4Value));
            }

            if (wpDesign.Attribute5Id != null && wpDesign.Attribute5Id != DEFAULT_NULL)
            {
                result.Add(new Tuple<string, float>(wpDesign.Attribute5Id, wpDesign.Attribute5Value));
            }

            return result;
        }

        public List<Tuple<string, float>> GetListEffectSkillDesigns()
        {
            string DEFAULT_NULL = DesignHelper.DEFAULT_NULL;
            WeaponDesign wpDesign = this;

            List<Tuple<string, float>> result = new List<Tuple<string, float>>();

            if (wpDesign.Attribute1Id != null && wpDesign.Attribute1Id != DEFAULT_NULL)
            {
                
                var effectSkill = wpDesign.Attribute1Id.FormatStringSkill().ParseEnum<EffectType>(EffectType.NONE);
                if (effectSkill != EffectType.NONE)
                {
                    result.Add(new Tuple<string, float>(wpDesign.Attribute1Id, wpDesign.Attribute1Value));
                }
            }

            if (wpDesign.Attribute2Id != null && wpDesign.Attribute2Id != DEFAULT_NULL)
            {
                var effectSkill = wpDesign.Attribute2Id.FormatStringSkill().ParseEnum<EffectType>(EffectType.NONE);
                if (effectSkill != EffectType.NONE)
                {
                    result.Add(new Tuple<string, float>(wpDesign.Attribute2Id, wpDesign.Attribute2Value));
                }
            }

            if (wpDesign.Attribute3Id != null && wpDesign.Attribute3Id != DEFAULT_NULL)
            {
                var effectSkill = wpDesign.Attribute3Id.FormatStringSkill().ParseEnum<EffectType>(EffectType.NONE);
                if (effectSkill != EffectType.NONE)
                {
                    result.Add(new Tuple<string, float>(wpDesign.Attribute3Id, wpDesign.Attribute3Value));
                }
            }

            if (wpDesign.Attribute4Id != null && wpDesign.Attribute4Id != DEFAULT_NULL)
            {
                var effectSkill = wpDesign.Attribute4Id.FormatStringSkill().ParseEnum<EffectType>(EffectType.NONE);
                if (effectSkill != EffectType.NONE)
                {
                    result.Add(new Tuple<string, float>(wpDesign.Attribute4Id, wpDesign.Attribute4Value));
                }
            }

            if (wpDesign.Attribute5Id != null && wpDesign.Attribute5Id != DEFAULT_NULL)
            {
                var effectSkill = wpDesign.Attribute5Id.FormatStringSkill().ParseEnum<EffectType>(EffectType.NONE);
                if (effectSkill != EffectType.NONE)
                {
                    result.Add(new Tuple<string, float>(wpDesign.Attribute5Id, wpDesign.Attribute5Value));
                }
            }

            return result;
        }
    }


    public partial class WeaponUpgradeCostData
    {
        public long gold;
        public long weaponScroll;
        public long armourScroll;

        public WeaponUpgradeCostData(long gold, long weaponScroll, long armourScroll)
        {
            this.gold = gold;
            this.weaponScroll = weaponScroll;
            this.armourScroll = armourScroll;
        }

        public WeaponUpgradeCostData(WeaponDesign weaponDesign)
        {
            gold = weaponDesign.UpGold;
            weaponScroll = weaponDesign.UpWeaponScroll;
            armourScroll = weaponDesign.UpArmourScroll;
        }

        public static WeaponUpgradeCostData operator +(WeaponUpgradeCostData a, WeaponUpgradeCostData b)
        {
            return new WeaponUpgradeCostData(a.gold + b.gold, a.weaponScroll + b.weaponScroll,
                a.armourScroll + b.armourScroll);
        }

        public bool HasArmourScroll()
        {
            return armourScroll > 0;
        }

        public bool HasWeaponScroll()
        {
            return weaponScroll > 0;
        }

        // public WeaponUpgradeCostData(float weaponDesignUpGoldStep, float weaponDesignUpWeaponStep, float weaponDesignUpArmourStep)
        // {
        //     this.gold = gold;
        //     this.weaponScroll = weaponScroll;
        //     this.armourScroll = armourScroll;
        // }
    }
}