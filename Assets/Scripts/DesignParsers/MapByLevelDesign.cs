// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var mapByLevelDesign = MapByLevelDesign.FromJson(jsonString);

namespace QuickType.MapByLevel
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class MapByLevelDesign
    {
        [JsonProperty("MapByLevel")]
        public List<MapByLevel> MapByLevel { get; set; }
    }

    public partial class MapByLevel
    {
        [JsonProperty("CampaignLevel")]
        public long CampaignLevel { get; set; }

        [JsonProperty("MapID")]
        public MAP_NAME MapId { get; set; }
    }

    public partial class MapByLevelDesign
    {
        public static MapByLevelDesign FromJson(string json) => JsonConvert.DeserializeObject<MapByLevelDesign>(json, QuickType.MapByLevel.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MapByLevelDesign self) => JsonConvert.SerializeObject(self, QuickType.MapByLevel.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                MapNameConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class MapNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(MAP_NAME) || t == typeof(MAP_NAME?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);


            return value.ParseEnum<MAP_NAME>(MAP_NAME.NONE);
            throw new Exception("Cannot unmarshal type RewardType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (MAP_NAME)untypedValue;

            serializer.Serialize(writer, value.ToString());

            throw new Exception("Cannot marshal type MAP_NAME");
        }

        public static readonly MapNameConverter Singleton = new MapNameConverter();
    }

}
