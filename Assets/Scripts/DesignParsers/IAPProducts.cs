// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var iapProducts = IapProducts.FromJson(jsonString);

namespace QuickType.IAPProducts
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class IapProducts
    {
        [JsonProperty("IAPProducts", Required = Required.Always)]
        public List<IapProduct> IapProductsIapProducts { get; set; }
    }

    public partial class IapProduct
    {
        [JsonProperty("ProductID", Required = Required.Always)]
        public string ProductId { get; set; }

        [JsonProperty("IAPType", Required = Required.Always)]
        public IAP_TYPE IapType { get; set; }

        [JsonProperty("Descriptions", Required = Required.Always)]
        public string Descriptions { get; set; }

        [JsonProperty("Price", Required = Required.Always)]
        public float Price { get; set; }
    }

    public partial class IapProducts
    {
        public static IapProducts FromJson(string json) => JsonConvert.DeserializeObject<IapProducts>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this IapProducts self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                IapTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class IapTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(IAP_TYPE) || t == typeof(IAP_TYPE?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            return value.ParseEnum<IAP_TYPE>(IAP_TYPE.NONE);
            throw new Exception("Cannot unmarshal type IapType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (IAP_TYPE)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
            throw new Exception("Cannot marshal type IapType");
        }

        public static readonly IapTypeConverter Singleton = new IapTypeConverter();
    }
}
