// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var chestHeroDesign = ChestHeroDesign.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ChestHeroDesign
    {
        [JsonProperty("ChestHeroDesign")] public List<ChestHeroDesignElement> ChestHeroDesignElements { get; set; }
    }

    public partial class ChestHeroDesignElement
    {
        [JsonProperty("ID")] public string Id { get; set; }

        [JsonProperty("Extra")] public List<Extra> Extra { get; set; }
    }

    public partial class ChestHeroDesignElement
    {
        public List<RewardData> GetRewards()
        {
            List<RewardData> result = new List<RewardData>();

            float randomNumber = UnityEngine.Random.Range(0f, 100f);
            float sub = 0;
            List<Tuple<Extra, float>> arr = new List<Tuple<Extra, float>>();

            foreach (var VARIABLE in Extra)
            {
                float percent = FBUtils.ParseFloatFromString(VARIABLE.Value.Split(',')[0]);
                arr.Add(new Tuple<Extra, float>(VARIABLE, percent));
            }

            Extra resultExtra = arr[0].Item1;

            for (int i = 0; i < arr.Count; i++)
            {
                sub += arr[i].Item2;
                if (randomNumber <= sub)
                {
                    resultExtra = arr[i].Item1;
                    break;
                }
            }

            string[] values = resultExtra.Value.Split(',');
            int min = int.Parse(values[1]);
            int max = int.Parse(values[2]);

            int value = UnityEngine.Random.Range(min, max + 1);
            // int du = value % 5;
            //
            // if (du != 0)
            //     value += 5 - value % 5;

            string heroId = resultExtra.RewardId;
            if (heroId == "ALL_HERO")
            {
                heroId = DesignHelper.GetRandomHeroID();
            }
            
            result.Add(new RewardData(REWARD_TYPE.SCROLL_HERO, value, heroId));
            return result;
        }
    }

    public partial class Extra
    {
        [JsonProperty("RewardID")] public string RewardId { get; set; }

        [JsonProperty("Value")] public string Value { get; set; }
    }

    public partial class ChestHeroDesign
    {
        public static ChestHeroDesign FromJson(string json) =>
            JsonConvert.DeserializeObject<ChestHeroDesign>(json, QuickType.Converter.Settings);
    }
}