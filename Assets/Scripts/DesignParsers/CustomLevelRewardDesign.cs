// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var idleRewardDesign = IdleRewardDesign.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class CustomCampaignRewardDesign
    {
        [JsonProperty("CustomCampaignReward", Required = Required.Always)]
        public List<CustomBattleReward> Rewards { get; set; }
    }

    //alias
    public partial class CustomIdleRewardDesign
    {
        [JsonProperty("CustomIdleRewardDesign", Required = Required.Always)]
        public List<CustomBattleReward> Rewards { get; set; }
    }

    public partial class CustomBattleReward
    {
        [JsonProperty("LevelReward", Required = Required.Always)]
        public int LevelReward { get; set; }

        [JsonProperty("Rewards", Required = Required.Always)]
        public List<Reward> Rewards { get; set; }

    }

    public partial class Reward
    {
        [JsonProperty("RewardID", Required = Required.Always)]
        public string RewardId { get; set; }

        [JsonProperty("Value", Required = Required.Always)]
        public long Value { get; set; }

        [JsonProperty("Loop")]
        public short Loop { get; set; }
    }

    public partial class CustomCampaignRewardDesign
    {
        public static CustomCampaignRewardDesign FromJson(string json) => JsonConvert.DeserializeObject<CustomCampaignRewardDesign>(json, QuickType.Converter.Settings);
    }

    public partial class CustomIdleRewardDesign
    {
        public static CustomIdleRewardDesign FromJson(string json) => JsonConvert.DeserializeObject<CustomIdleRewardDesign>(json, QuickType.Converter.Settings);
    }

    public static partial class Serialize
    {
        public static string ToJson(this CustomCampaignRewardDesign self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static partial class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

}
