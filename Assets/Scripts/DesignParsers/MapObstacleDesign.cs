// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var mapObstacleDesign = MapObstacleDesign.FromJson(jsonString);

using UnityEngine;

namespace QuickType.MapObstacle
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class MapObstacleDesign
    {
        [JsonProperty("MapObstacleDesign")]
        public List<MapObstaclesDesignElement> MapObstaclesDesignElements { get; set; }
    }

    public enum OBSTACLE_TYPE
    {
        BARRIER,
        EXPLODE 
    }

    public partial class MapObstaclesDesignElement
    {
        [JsonProperty("ObstacleID")]
        public string ObstacleId { get; set; }

        [JsonProperty("ObstacleType")] 
        public OBSTACLE_TYPE ObstacleType { get; set; }

        [JsonProperty("HPPercent")]
        public long HpPercent { get; set; }

        [JsonProperty("BaseDmg")]
        public long BaseDmg { get; set; }

        [JsonProperty("StepDmg")]
        public long StepDmg { get; set; }
        
        [JsonProperty("Size")]
        public string Size { get; set; }
    }

    public partial class MapObstaclesDesignElement
    {
        public Vector2 GetSize()
        {
            string[] sizeArray = this.Size.Split('x');
            return new Vector2(int.Parse(sizeArray[0]), int.Parse(sizeArray[1]));
        } 
    }
    

    public partial class MapObstacleDesign
    {
        public static MapObstacleDesign FromJson(string json) => JsonConvert.DeserializeObject<MapObstacleDesign>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MapObstacleDesign self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
