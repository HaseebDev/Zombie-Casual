// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var zombieDesign = ZombieDesign.FromJson(jsonString);

namespace QuickType.Zombie
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ZombieDesign
    {
        [JsonProperty("ZombieDesign", Required = Required.Always)]
        public List<ZombieElement> ZombieElement { get; set; }
    }

    public partial class ZombieElement
    {
        [JsonProperty("ZombieID", Required = Required.Always)]
        public string ZombieId { get; set; }

        [JsonProperty("Level", Required = Required.Always)]
        public long Level { get; set; }

        [JsonProperty("DefSpeed", Required = Required.Always)]
        public double DefSpeed { get; set; }

        [JsonProperty("AngrySpeed", Required = Required.Always)]
        public double AngrySpeed { get; set; }

        [JsonProperty("MinRange", Required = Required.Always)]
        public float MinRange { get; set; }

        [JsonProperty("MaxRange", Required = Required.Always)]
        public float MaxRange { get; set; }

        [JsonProperty("Dmg", Required = Required.Always)]
        public long Dmg { get; set; }


        [JsonProperty("Radius", Required = Required.Always)]
        public float Radius { get; set; }

        [JsonProperty("Value", Required = Required.Always)]
        public float Value { get; set; }

        [JsonProperty("Duration", Required = Required.Always)]
        public float Duration { get; set; }

        [JsonProperty("HP", Required = Required.Always)]
        public float HP { get; set; }

        [JsonProperty("FireRate", Required = Required.Always)]
        public float FireRate { get; set; }

        [JsonProperty("TurningSpeed", Required = Required.Always)]
        public double TurningSpeed { get; set; }

        [JsonProperty("MinTurningTime", Required = Required.Always)]
        public float MinTurningTime { get; set; }

        [JsonProperty("MaxTurningTime", Required = Required.Always)]
        public float MaxTurningTime { get; set; }

        [JsonProperty("TurningAngle", Required = Required.Always)]
        public float TurningAngle { get; set; }

        [JsonProperty("RunChance", Required = Required.Always)]
        public long RunChance { get; set; }

        [JsonProperty("CritPercentage", Required = Required.Always)]
        public long CritPercentage { get; set; }

        [JsonProperty("CritMultiplier", Required = Required.Always)]
        public long CritMultiplier { get; set; }

        [JsonProperty("KillRewardGold", Required = Required.Always)]
        public long KillRewardGold { get; set; }

        [JsonProperty("KillRewardToken", Required = Required.Always)]
        public long KillRewardToken { get; set; }
    }

    public partial class ZombieDesign
    {
        public static ZombieDesign FromJson(string json) => JsonConvert.DeserializeObject<ZombieDesign>(json, QuickType.Zombie.Converter.Settings);
    }


    public static class Serialize
    {
        public static string ToJson(this ZombieDesign self) => JsonConvert.SerializeObject(self, QuickType.Zombie.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
