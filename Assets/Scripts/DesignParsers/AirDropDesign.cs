// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var airDropDesign = AirDropDesign.FromJson(jsonString);

namespace QuickType.AirDrop
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class AirDropDesign
    {
        [JsonProperty("AirDropDesign", Required = Required.Always)]
        public List<AirDropElement> Arr { get; set; }
    }

    public partial class AirDropElement
    {
        [JsonProperty("AirDropID", Required = Required.Always)]
        public string AirDropId { get; set; }

        [JsonProperty("LevelRequire", Required = Required.Always)]
        public long LevelRequire { get; set; }

        [JsonProperty("BaseGold", Required = Required.Always)]
        public long BaseGold { get; set; }

        [JsonProperty("StepGold", Required = Required.Always)]
        public long StepGold { get; set; }

        [JsonProperty("BaseToken", Required = Required.Always)]
        public long BaseToken { get; set; }

        [JsonProperty("StepToken", Required = Required.Always)]
        public long StepToken { get; set; }

        [JsonProperty("NumExtra", Required = Required.Always)]
        public long NumExtra { get; set; }

        [JsonProperty("Extra", Required = Required.AllowNull)]
        public List<Extra> Extra { get; set; }
    }

    public partial class Extra
    {
        [JsonProperty("RewardID", Required = Required.Always)]
        public string RewardId { get; set; }

        [JsonProperty("Value", Required = Required.Always)]
        public long Value { get; set; }

        [JsonProperty("Weight", Required = Required.Always)]
        public long Weight { get; set; }
    }


    public partial class AirDropDesign
    {
        public static AirDropDesign FromJson(string json) => JsonConvert.DeserializeObject<AirDropDesign>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AirDropDesign self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

}
